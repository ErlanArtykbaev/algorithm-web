{"version":3,"sources":["components/layer/ImageWrapper.js","components/layer/CodePreview.js","assets/img/tree/binary-tree_0.webp","assets/img/tree/full-binary-tree_0.webp","assets/img/tree/perfect-binary-tree_0.webp","assets/img/tree/complete-binary-tree_0.webp","assets/img/tree/binary-tree-representation_0.webp","components/pages/Tree/WhatIsBinaryTree.js"],"names":["ImageWrapper","props","className","size","src","url","alt","text","CodePreview","code","language","style","docco","module","exports","WhatIsBinaryTree","first","second","third","fourth","fifth"],"mappings":"sHAAA,oBAWeA,IATM,SAACC,GACpB,OACE,yBAAKC,UAAU,iBACb,yBAAKA,UAAWD,EAAME,KAAMC,IAAKH,EAAMI,IAAKC,IAAKL,EAAMI,MACvD,yBAAKH,UAAU,gBAAgBD,EAAMM,S,gCCN3C,sCAeeC,IAVK,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAC3B,OACE,yBAAKR,UAAU,QACb,kBAAC,IAAD,CAAmBQ,SAAUA,EAAUC,MAAOC,KAC3CH,M,oBCTTI,EAAOC,QAAU,IAA0B,4C,oBCA3CD,EAAOC,QAAU,IAA0B,iD,oBCA3CD,EAAOC,QAAU,IAA0B,oD,oBCA3CD,EAAOC,QAAU,IAA0B,qD,oBCA3CD,EAAOC,QAAU,IAA0B,2D,iCCA3C,qIA8IeC,UApIU,WACvB,OACE,yBAAKb,UAAU,aACb,wBAAIA,UAAU,SAAd,eACA,2IAIA,kBAAC,IAAD,CAAcC,KAAK,KAAKE,IAAKW,IAAOT,KAAK,gBACzC,yBAAKL,UAAU,YACf,wBAAIA,UAAU,aAAd,wBACA,wBAAIA,UAAU,iBAAd,oBACA,0JAIA,kBAAC,IAAD,CAAcC,KAAK,KAAKE,IAAKY,IAAQV,KAAK,qBAC1C,wBAAIL,UAAU,iBAAd,uBACA,oLAKA,kBAAC,IAAD,CAAcC,KAAK,KAAKE,IAAKa,IAAOX,KAAK,wBACzC,wBAAIL,UAAU,iBAAd,wBACA,qHAIA,uEACA,mFACA,yJAIA,kBAAC,IAAD,CAAcC,KAAK,KAAKE,IAAKc,IAAQZ,KAAK,yBAC1C,yBAAKL,UAAU,YACf,wBAAIA,UAAU,aAAd,8BACA,kKAIA,kBAAC,IAAD,CACEO,KAAI,wIAQJC,SAAS,MAEX,kBAAC,IAAD,CAAcP,KAAK,KAAKE,IAAKe,IAAOb,KAAK,+BACzC,yBAAKL,UAAU,YACf,wBAAIA,UAAU,aAAd,gBACA,kBAAC,IAAD,CACEO,KAAI,q6DAqEJC,SAAS","file":"static/js/12.62d284d8.chunk.js","sourcesContent":["import React from \"react\"\n\nconst ImageWrapper = (props) => {\n  return (\n    <div className='image-wrapper'>\n      <img className={props.size} src={props.url} alt={props.url} />\n      <div className='image-bottom'>{props.text}</div>\n    </div>\n  )\n}\n\nexport default ImageWrapper\n","import React from \"react\"\n\nimport SyntaxHighlighter from \"react-syntax-highlighter\"\nimport { docco } from \"react-syntax-highlighter/dist/esm/styles/hljs\"\n\nconst CodePreview = ({ code, language }) => {\n  return (\n    <div className='Code'>\n      <SyntaxHighlighter language={language} style={docco}>\n        {code}\n      </SyntaxHighlighter>\n    </div>\n  )\n}\n\nexport default CodePreview\n","module.exports = __webpack_public_path__ + \"static/media/binary-tree_0.9117eec4.webp\";","module.exports = __webpack_public_path__ + \"static/media/full-binary-tree_0.0cd7b705.webp\";","module.exports = __webpack_public_path__ + \"static/media/perfect-binary-tree_0.7890e776.webp\";","module.exports = __webpack_public_path__ + \"static/media/complete-binary-tree_0.02b0ea3c.webp\";","module.exports = __webpack_public_path__ + \"static/media/binary-tree-representation_0.64c5f037.webp\";","import React from \"react\"\nimport ImageWrapper from \"../../layer/ImageWrapper\"\n\nimport first from \"../../../assets/img/tree/binary-tree_0.webp\"\nimport second from \"../../../assets/img/tree/full-binary-tree_0.webp\"\nimport third from \"../../../assets/img/tree/perfect-binary-tree_0.webp\"\nimport fourth from \"../../../assets/img/tree/complete-binary-tree_0.webp\"\nimport fifth from \"../../../assets/img/tree/binary-tree-representation_0.webp\"\nimport CodePreview from \"../../layer/CodePreview\"\n\nconst WhatIsBinaryTree = () => {\n  return (\n    <div className='container'>\n      <h3 className='title'>Binary Tree</h3>\n      <p>\n        A binary tree is a tree data structure in which each parent node can\n        have at most two children. For example,\n      </p>\n      <ImageWrapper size='sm' url={first} text='Binary Tree' />\n      <div className='divider'></div>\n      <h3 className='sub-title'>Types of Binary Tree</h3>\n      <h3 className='sub-sub-title'>Full Binary Tree</h3>\n      <p>\n        A full Binary tree is a special type of binary tree in which every\n        parent node/internal node has either two or no children.\n      </p>\n      <ImageWrapper size='sm' url={second} text='Full Binary Tree' />\n      <h3 className='sub-sub-title'>Perfect Binary Tree</h3>\n      <p>\n        A perfect binary tree is a type of binary tree in which every internal\n        node has exactly two child nodes and all the leaf nodes are at the same\n        level.\n      </p>\n      <ImageWrapper size='sm' url={third} text='Perfect Binary Tree' />\n      <h3 className='sub-sub-title'>Complete Binary Tree</h3>\n      <p>\n        A complete binary tree is just like a full binary tree, but with two\n        major differences\n      </p>\n      <p>1. Every level must be completely filled</p>\n      <p>2. All the leaf elements must lean towards the left.</p>\n      <p>\n        3. The last leaf element might not have a right sibling i.e. a complete\n        binary tree doesn't have to be a full binary tree.\n      </p>\n      <ImageWrapper size='sm' url={fourth} text='Complete Binary Tree' />\n      <div className='divider'></div>\n      <h3 className='sub-title'>Binary Tree Representation</h3>\n      <p>\n        A node of a binary tree is represented by a structure containing a data\n        part and two pointers to other structures of the same type.\n      </p>\n      <CodePreview\n        code={`\n        struct node\n        {\n         int data;\n         struct node *left;\n         struct node *right;\n        };\n        `}\n        language='c'\n      />\n      <ImageWrapper size='md' url={fifth} text='Binary Tree Representation' />\n      <div className='divider'></div>\n      <h3 className='sub-title'>Java Example</h3>\n      <CodePreview\n        code={`\n        // Binary Tree in Java\n\n        // Node creation\n        class Node {\n          int key;\n          Node left, right;\n        \n          public Node(int item) {\n          key = item;\n          left = right = null;\n          }\n        }\n        \n        class BinaryTree {\n          Node root;\n        \n          BinaryTree(int key) {\n          root = new Node(key);\n          }\n        \n          BinaryTree() {\n          root = null;\n          }\n        \n          // Traverse Inorder\n          public void traverseInOrder(Node node) {\n          if (node != null) {\n            traverseInOrder(node.left);\n            System.out.print(\" \" + node.key);\n            traverseInOrder(node.right);\n          }\n          }\n        \n          // Traverse Postorder\n          public void traversePostOrder(Node node) {\n          if (node != null) {\n            traversePostOrder(node.left);\n            traversePostOrder(node.right);\n            System.out.print(\" \" + node.key);\n          }\n          }\n        \n          // Traverse Preorder\n          public void traversePreOrder(Node node) {\n          if (node != null) {\n            System.out.print(\" \" + node.key);\n            traversePreOrder(node.left);\n            traversePreOrder(node.right);\n          }\n          }\n        \n          public static void main(String[] args) {\n          BinaryTree tree = new BinaryTree();\n        \n          tree.root = new Node(1);\n          tree.root.left = new Node(2);\n          tree.root.right = new Node(3);\n          tree.root.left.left = new Node(4);\n        \n          System.out.print(\"Pre order Traversal: \");\n          tree.traversePreOrder(tree.root);\n          System.out.print(\"In order Traversal: \");\n          tree.traverseInOrder(tree.root);\n          System.out.print(\"Post order Traversal: \");\n          tree.traversePostOrder(tree.root);\n          }\n        }\n        `}\n        language='java'\n      />\n    </div>\n  )\n}\n\nexport default WhatIsBinaryTree\n"],"sourceRoot":""}