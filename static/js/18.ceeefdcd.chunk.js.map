{"version":3,"sources":["components/layer/ImageWrapper.js","components/layer/CodePreview.js","assets/img/hash/Hash-0.webp","assets/img/hash/Hash-2_0.webp","assets/img/hash/Hash-3_1.webp","components/pages/Hash/WhatIsHashTable.js"],"names":["ImageWrapper","props","className","size","src","url","alt","text","CodePreview","code","language","style","docco","module","exports","WhatisHashTable","first","second","third"],"mappings":"sHAAA,oBAWeA,IATM,SAACC,GACpB,OACE,yBAAKC,UAAU,iBACb,yBAAKA,UAAWD,EAAME,KAAMC,IAAKH,EAAMI,IAAKC,IAAKL,EAAMI,MACvD,yBAAKH,UAAU,gBAAgBD,EAAMM,S,gCCN3C,sCAeeC,IAVK,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAC3B,OACE,yBAAKR,UAAU,QACb,kBAAC,IAAD,CAAmBQ,SAAUA,EAAUC,MAAOC,KAC3CH,M,oBCTTI,EAAOC,QAAU,IAA0B,qC,oBCA3CD,EAAOC,QAAU,IAA0B,uC,oBCA3CD,EAAOC,QAAU,IAA0B,uC,iCCA3C,iGA6NeC,UArNS,WACtB,OACE,yBAAKb,UAAU,aACb,wBAAIA,UAAU,SAAd,cACA,qGAGA,4BACE,4BACE,0CADF,wDAIA,4BACE,4CADF,yCAIF,kBAAC,IAAD,CAAcC,KAAK,KAAKE,IAAKW,IAAOT,KAAK,gCACzC,yBAAKL,UAAU,YACf,wBAAIA,UAAU,aAAd,2BACA,2LAKA,kCACM,0BAAMA,UAAU,OAAhB,KADN,gBACkD,IAChD,0BAAMA,UAAU,OAAhB,QAFF,uBAIA,oCACQ,0BAAMA,UAAU,OAAhB,QADR,8DAEgC,0BAAMA,UAAU,OAAhB,KAFhC,KAIA,kBAAC,IAAD,CAAcC,KAAK,MAAME,IAAKY,IAAQV,KAAK,8BAC3C,yBAAKL,UAAU,YACf,wBAAIA,UAAU,aAAd,kBACA,oMAKA,uGAGA,4BACE,gEACA,6FAEF,yBAAKA,UAAU,YACf,wBAAIA,UAAU,aAAd,uCACA,wLAKA,iCACK,0BAAMA,UAAU,OAAhB,KADL,4HAGW,0BAAMA,UAAU,OAAhB,KAHX,YAGmD,IACjD,0BAAMA,UAAU,OAAhB,OAJF,KAMA,kBAAC,IAAD,CACEC,KAAK,MACLE,IAAKa,IACLX,KAAK,wCAEP,yBAAKL,UAAU,YACf,wBAAIA,UAAU,aAAd,sBACA,8KAGO,0BAAMA,UAAU,OAAhB,OAHP,KAKA,gFACA,wBAAIA,UAAU,iBAAd,qBACA,kGACA,2BACE,0BAAMA,UAAU,OAAhB,qCAEF,oCACA,4BACE,4BACE,0BAAMA,UAAU,OAAhB,wBAEF,4BACE,0BAAMA,UAAU,OAAhB,SADF,4BAIF,uDAC2B,0BAAMA,UAAU,OAAhB,WAD3B,SACsE,IACpE,0BAAMA,UAAU,OAAhB,WAFF,qEAKA,yPAMA,wBAAIA,UAAU,iBAAd,yBACA,oKAIA,2BACE,0BAAMA,UAAU,OAAhB,8CAEF,qCACA,4BACE,2EACA,4BACE,0BAAMA,UAAU,OAAhB,yBAGJ,wBAAIA,UAAU,iBAAd,uBACA,6JAIA,2BACE,0BAAMA,UAAU,OAAhB,qCAEF,yBAAKA,UAAU,YACf,wBAAIA,UAAU,aAAd,uBACA,6IAIA,qGAGA,wBAAIA,UAAU,iBAAd,sBACA,yHAIA,2BACE,iDAEF,yEAC8C,IAC5C,0BAAMA,UAAU,OAAhB,MAFF,QAEsC,0BAAMA,UAAU,OAAhB,UAAoC,IAF1E,QAGO,0BAAMA,UAAU,OAAhB,cAHP,OAGmD,IACjD,0BAAMA,UAAU,OAAhB,UAJF,iBAIoD,IAClD,0BAAMA,UAAU,OAAhB,KALF,6BAK2D,IACzD,0BAAMA,UAAU,OAAhB,KANF,+BAM6D,IAC3D,0BAAMA,UAAU,OAAhB,KAPF,wBAOsD,IACpD,0BAAMA,UAAU,OAAhB,sBARF,sEAWA,kBAAC,IAAD,CACEO,KAAI,uRAMJC,SAAS,MAEX,wBAAIR,UAAU,iBAAd,4BACA,2BACE,0BAAMA,UAAU,OAAhB,mCAEF,sCACA,4BACE,4BACE,0BAAMA,UAAU,OAAhB,YADF,6BACkE,IAChE,0BAAMA,UAAU,OAAhB,MAFF,KAIA,4BACE,0BAAMA,UAAU,OAAhB,iBADF,0BAGA,4BACE,0BAAMA,UAAU,OAAhB,KADF,wFAEkD,IAChD,0BAAMA,UAAU,OAAhB,wBAHF,yBAMF,wBAAIA,UAAU,iBAAd,wBACA,+GAIA,yBAAKA,UAAU,YACf,wBAAIA,UAAU,aAAd,gBACA,kBAAC,IAAD,CACEO,KAAI,2hBAsBJC,SAAS","file":"static/js/18.ceeefdcd.chunk.js","sourcesContent":["import React from \"react\"\n\nconst ImageWrapper = (props) => {\n  return (\n    <div className='image-wrapper'>\n      <img className={props.size} src={props.url} alt={props.url} />\n      <div className='image-bottom'>{props.text}</div>\n    </div>\n  )\n}\n\nexport default ImageWrapper\n","import React from \"react\"\n\nimport SyntaxHighlighter from \"react-syntax-highlighter\"\nimport { docco } from \"react-syntax-highlighter/dist/esm/styles/hljs\"\n\nconst CodePreview = ({ code, language }) => {\n  return (\n    <div className='Code'>\n      <SyntaxHighlighter language={language} style={docco}>\n        {code}\n      </SyntaxHighlighter>\n    </div>\n  )\n}\n\nexport default CodePreview\n","module.exports = __webpack_public_path__ + \"static/media/Hash-0.3fbc5cc3.webp\";","module.exports = __webpack_public_path__ + \"static/media/Hash-2_0.007a84d4.webp\";","module.exports = __webpack_public_path__ + \"static/media/Hash-3_1.0147e9ad.webp\";","import React from \"react\"\nimport ImageWrapper from \"../../layer/ImageWrapper\"\n\nimport first from \"../../../assets/img/hash/Hash-0.webp\"\nimport second from \"../../../assets/img/hash/Hash-2_0.webp\"\nimport third from \"../../../assets/img/hash/Hash-3_1.webp\"\nimport CodePreview from \"../../layer/CodePreview\"\n\nconst WhatisHashTable = () => {\n  return (\n    <div className='container'>\n      <h3 className='title'>Hash Table</h3>\n      <p>\n        The Hash table data structure stores elements in key-value pairs where\n      </p>\n      <ul>\n        <li>\n          <strong>Key - </strong> unique integer that is used for indexing the\n          values\n        </li>\n        <li>\n          <strong>Value - </strong> data that are associated with keys.\n        </li>\n      </ul>\n      <ImageWrapper size='sm' url={first} text='Key and Value in Hash table' />\n      <div className='divider'></div>\n      <h3 className='sub-title'>Hashing (Hash Function)</h3>\n      <p>\n        In a hash table, a new index is processed using the keys. And, the\n        element corresponding to that key is stored in the index. This process\n        is called hashing.\n      </p>\n      <p>\n        Let <span className='var'>k</span> be a key and{\" \"}\n        <span className='var'>h(x)</span>be a hash function.\n      </p>\n      <p>\n        Here, <span className='var'>h(k)</span> will give us a new index to\n        store the element linked with <span className='var'>k</span>.\n      </p>\n      <ImageWrapper size='big' url={second} text='Hash table Representation' />\n      <div className='divider'></div>\n      <h3 className='sub-title'>Hash Collision</h3>\n      <p>\n        When the hash function generates the same index for multiple keys, there\n        will be a conflict (what value to be stored in that index). This is\n        called a hash collision.\n      </p>\n      <p>\n        We can resolve the hash collision using one of the following techniques.\n      </p>\n      <ul>\n        <li>Collision resolution by chaining</li>\n        <li>Open Addressing: Linear/Quadratic Probing and Double Hashing</li>\n      </ul>\n      <div className='divider'></div>\n      <h3 className='sub-title'>1. Collision resolution by chaining</h3>\n      <p>\n        In chaining, if a hash function produces the same index for multiple\n        elements, these elements are stored in the same index by using a\n        doubly-linked list.\n      </p>\n      <p>\n        If <span className='var'>j</span> is the slot for multiple elements, it\n        contains a pointer to the head of the list of elements. If no element is\n        present, <span className='var'>j</span> contains{\" \"}\n        <span className='var'>NIL</span>.\n      </p>\n      <ImageWrapper\n        size='big'\n        url={third}\n        text='Collision Resolution using chaining'\n      />\n      <div className='divider'></div>\n      <h3 className='sub-title'>2. Open Addressing</h3>\n      <p>\n        Unlike chaining, open addressing doesn't store multiple elements into\n        the same slot. Here, each slot is either filled with a single key or\n        left <span className='var'>NIL</span>.\n      </p>\n      <p>Different techniques used in open addressing are:</p>\n      <h3 className='sub-sub-title'>i. Linear Probing</h3>\n      <p>In linear probing, collision is resolved by checking the next slot.</p>\n      <p>\n        <span className='var'>h(k, i) = (h′(k) + i) mod m</span>\n      </p>\n      <p>where</p>\n      <ul>\n        <li>\n          <span className='var'>{`i = {0, 1, ….}`}</span>\n        </li>\n        <li>\n          <span className='var'>h'(k)</span> is a new hash function\n        </li>\n      </ul>\n      <p>\n        If a collision occurs at <span className='var'>h(k, 0)</span>, then{\" \"}\n        <span className='var'>h(k, 1)</span> is checked. In this way, the value\n        of i is incremented linearly.\n      </p>\n      <p>\n        The problem with linear probing is that a cluster of adjacent slots is\n        filled. When inserting a new element, the entire cluster must be\n        traversed. This adds to the time required to perform operations on the\n        hash table.\n      </p>\n      <h3 className='sub-sub-title'>ii. Quadratic Probing</h3>\n      <p>\n        It works similar to linear probing but the spacing between the slots is\n        increased (greater than one) by using the following relation.\n      </p>\n      <p>\n        <span className='var'>{`h(k, i) = (h′(k) + c1i + c2i2) mod m`}</span>\n      </p>\n      <p>where,</p>\n      <ul>\n        <li>c1 and c2 are positive auxiliary constants,</li>\n        <li>\n          <span className='var'>{`i = {0, 1, ….}`}</span>\n        </li>\n      </ul>\n      <h3 className='sub-sub-title'>iii. Double hashing</h3>\n      <p>\n        If a collision occurs after applying a hash function h(k), then another\n        hash function is calculated for finding the next slot.\n      </p>\n      <p>\n        <span className='var'>h(k, i) = (h1(k) + ih2(k)) mod m</span>\n      </p>\n      <div className='divider'></div>\n      <h3 className='sub-title'>Good Hash Functions</h3>\n      <p>\n        A good hash function may not prevent the collisions completely however\n        it can reduce the number of collisions.\n      </p>\n      <p>\n        Here, we will look into different methods to find a good hash function\n      </p>\n      <h3 className='sub-sub-title'>1. Division Method</h3>\n      <p>\n        If k is a key and m is the size of the hash table, the hash function h()\n        is calculated as:\n      </p>\n      <p>\n        <span>h(k) = k mod m</span>\n      </p>\n      <p>\n        For example, If the size of a hash table is{\" \"}\n        <span className='var'>10</span> and <span className='var'>k = 12</span>{\" \"}\n        then <span className='var'>h(k) = 112</span> mod{\" \"}\n        <span className='var'>10 = 2</span>. The value of{\" \"}\n        <span className='var'>m</span> must not be the powers of{\" \"}\n        <span className='var'>2</span>. This because the powers of{\" \"}\n        <span className='bar'>2</span> in binary format are{\" \"}\n        <span className='var'>10, 100, 1000, ...</span>. When we find k mod m,\n        we will always get the lower order p-bits.\n      </p>\n      <CodePreview\n        code={`\n        if m = 22, k = 17, then h(k) = 17 mod 22 = 10001 mod 100 = 01\n        if m = 23, k = 17, then h(k) = 17 mod 22 = 10001 mod 100 = 001\n        if m = 24, k = 17, then h(k) = 17 mod 22 = 10001 mod 100 = 0001\n        if m = 2p, then h(k) = p lower bits of m\n        `}\n        language='c'\n      />\n      <h3 className='sub-sub-title'>2. Multiplication Method</h3>\n      <p>\n        <span className='var'>h(k) = ⌊m(kA mod 1)⌋</span>\n      </p>\n      <p>where, </p>\n      <ul>\n        <li>\n          <span className='var'>kA mod 1</span> gives the fractional part{\" \"}\n          <span className='var'>kA</span>,\n        </li>\n        <li>\n          <span className='var'>⌊ ⌋</span> gives the floor value\n        </li>\n        <li>\n          <span className='var'>A</span> is any constant. The value of A lies\n          between 0 and 1. But, an optimal choice will be{\" \"}\n          <span className='var'>≈ (√5-1)/2</span> suggested by Knuth.\n        </li>\n      </ul>\n      <h3 className='sub-sub-title'>3. Universal Hashing</h3>\n      <p>\n        In Universal hashing, the hash function is chosen at random independent\n        of keys.\n      </p>\n      <div className='divider'></div>\n      <h3 className='sub-title'>Java Example</h3>\n      <CodePreview\n        code={`\n        // Java program to demonstrate working of HashTable \n\n        import java.util.*; \n        \n        class HashTable { \n          public static void main(String args[]) \n          {\n          Hashtable<Integer, Integer> \n            ht = new Hashtable<Integer, Integer>(); \n          \n          ht.put(123, 432); \n          ht.put(12, 2345);\n          ht.put(15, 5643); \n          ht.put(3, 321);\n        \n          ht.remove(12);\n        \n          System.out.println(ht); \n          } \n        } \n        `}\n        language='java'\n      />\n    </div>\n  )\n}\n\nexport default WhatisHashTable\n"],"sourceRoot":""}