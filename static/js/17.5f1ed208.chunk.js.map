{"version":3,"sources":["components/layer/ImageWrapper.js","components/layer/CodePreview.js","assets/img/queues/stack-of-plates_0.webp","assets/img/queues/stack.webp","assets/img/queues/stack-operations.webp","components/pages/Queues/WhatIsStack.js"],"names":["ImageWrapper","props","className","size","src","url","alt","text","CodePreview","code","language","style","docco","module","exports","WhatIsStack","first","second","third"],"mappings":"sHAAA,oBAWeA,IATM,SAACC,GACpB,OACE,yBAAKC,UAAU,iBACb,yBAAKA,UAAWD,EAAME,KAAMC,IAAKH,EAAMI,IAAKC,IAAKL,EAAMI,MACvD,yBAAKH,UAAU,gBAAgBD,EAAMM,S,gCCN3C,sCAeeC,IAVK,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAC3B,OACE,yBAAKR,UAAU,QACb,kBAAC,IAAD,CAAmBQ,SAAUA,EAAUC,MAAOC,KAC3CH,M,oBCTTI,EAAOC,QAAU,IAA0B,gD,oBCA3CD,EAAOC,QAAU,IAA0B,oC,oBCA3CD,EAAOC,QAAU,IAA0B,+C,iCCA3C,iGA8LeC,UAtLK,WAClB,OACE,yBAAKb,UAAU,aACb,wBAAIA,UAAU,SAAd,wBACA,6IAIA,kBAAC,IAAD,CACEC,KAAK,KACLE,IAAKW,IACLT,KAAK,oDAEP,2FACA,4BACE,sDACA,qDAEF,6IAE+C,IAC7C,uDAHF,sDAMA,yBAAKL,UAAU,YACf,wBAAIA,UAAU,aAAd,2BACA,iGACsE,IACpE,0CAFF,kCAEyD,IACvD,uCAHF,KAKA,kBAAC,IAAD,CACEC,KAAK,KACLE,IAAKY,IACLV,KAAK,kCAEP,0HAEsB,4DAFtB,eAIA,mKAIA,yBAAKL,UAAU,YACf,wBAAIA,UAAU,aAAd,6BACA,uHAIA,4BACE,4BACE,0CADF,yCAGA,4BACE,yCADF,8CAGA,4BACE,6CADF,gCAGA,4BACE,4CADF,+BAGA,4BACE,0CADF,0DAKF,yBAAKA,UAAU,YACf,wBAAIA,UAAU,aAAd,mCACA,8DACA,kDACsB,0BAAMA,UAAU,OAAhB,OADtB,2DAIA,4IAE2C,IACzC,0BAAMA,UAAU,OAAhB,aAHF,KAKA,6IAEwC,0BAAMA,UAAU,OAAhB,QAExC,2FACgE,IAC9D,0BAAMA,UAAU,OAAhB,OAFF,0BAIA,uFACA,wFACA,kBAAC,IAAD,CACEC,KAAK,KACLE,IAAKa,IACLX,KAAK,oCAEP,yBAAKL,UAAU,YACf,wBAAIA,UAAU,aAAd,gCACA,kBAAC,IAAD,CACEQ,SAAS,OACTD,KAAI,42DAyEN,yBAAKP,UAAU,YACf,wBAAIA,UAAU,aAAd,yBACA,kIAEsC,0BAAMA,UAAU,OAAhB,QAFtC","file":"static/js/17.5f1ed208.chunk.js","sourcesContent":["import React from \"react\"\n\nconst ImageWrapper = (props) => {\n  return (\n    <div className='image-wrapper'>\n      <img className={props.size} src={props.url} alt={props.url} />\n      <div className='image-bottom'>{props.text}</div>\n    </div>\n  )\n}\n\nexport default ImageWrapper\n","import React from \"react\"\n\nimport SyntaxHighlighter from \"react-syntax-highlighter\"\nimport { docco } from \"react-syntax-highlighter/dist/esm/styles/hljs\"\n\nconst CodePreview = ({ code, language }) => {\n  return (\n    <div className='Code'>\n      <SyntaxHighlighter language={language} style={docco}>\n        {code}\n      </SyntaxHighlighter>\n    </div>\n  )\n}\n\nexport default CodePreview\n","module.exports = __webpack_public_path__ + \"static/media/stack-of-plates_0.8a4d93f7.webp\";","module.exports = __webpack_public_path__ + \"static/media/stack.f89ff169.webp\";","module.exports = __webpack_public_path__ + \"static/media/stack-operations.8098ec70.webp\";","import React from \"react\"\nimport ImageWrapper from \"../../layer/ImageWrapper\"\n\nimport first from \"../../../assets/img/queues/stack-of-plates_0.webp\"\nimport second from \"../../../assets/img/queues/stack.webp\"\nimport third from \"../../../assets/img/queues/stack-operations.webp\"\nimport CodePreview from \"../../layer/CodePreview\"\n\nconst WhatIsStack = () => {\n  return (\n    <div className='container'>\n      <h3 className='title'>Stack Data Structure</h3>\n      <p>\n        A stack is a useful data structure in programming. It is just like a\n        pile of plates kept on top of each other.\n      </p>\n      <ImageWrapper\n        size='sm'\n        url={first}\n        text='Stack representation similar to a pile of plate'\n      />\n      <p>Think about the things you can do with such a pile of plates</p>\n      <ul>\n        <li>Put a new plate on top</li>\n        <li>Remove the top plate</li>\n      </ul>\n      <p>\n        If you want the plate at the bottom, you must first remove all the\n        plates on top. Such an arrangement is called{\" \"}\n        <strong> Last In First Out </strong> - the last item that is the first\n        item to go out.\n      </p>\n      <div className='divider'></div>\n      <h3 className='sub-title'>LIFO Principle of Stack</h3>\n      <p>\n        In programming terms, putting an item on top of the stack is called{\" \"}\n        <strong> push </strong> and removing an item is called{\" \"}\n        <strong>pop</strong>.\n      </p>\n      <ImageWrapper\n        size='sm'\n        url={second}\n        text='Stack Push and Pop Operations'\n      />\n      <p>\n        In the above image, although item 2 was kept last, it was removed first\n        - so it follows the <strong> Last In First Out(LIFO)</strong> principle.\n      </p>\n      <p>\n        We can implement a stack in any programming language like C, C++, Java,\n        Python or C#, but the specification is pretty much the same.\n      </p>\n      <div className='divider'></div>\n      <h3 className='sub-title'>Basic Operations of Stack</h3>\n      <p>\n        A stack is an object (an abstract data type - ADT) that allows the\n        following operations:\n      </p>\n      <ul>\n        <li>\n          <strong>Push: </strong> Add an element to the top of a stack\n        </li>\n        <li>\n          <strong>Pop: </strong> Remove an element from the top of a stack\n        </li>\n        <li>\n          <strong>IsEmpty: </strong> Check if the stack is empty\n        </li>\n        <li>\n          <strong>IsFull: </strong> Check if the stack is full\n        </li>\n        <li>\n          <strong>Peek: </strong> Get the value of the top element without\n          removing it\n        </li>\n      </ul>\n      <div className='divider'></div>\n      <h3 className='sub-title'>Working of Stack Data Structure</h3>\n      <p>The operations work as follows:</p>\n      <p>\n        1. A pointer called <span className='var'>TOP</span> is used to keep\n        track of the top element in the stack.\n      </p>\n      <p>\n        2. When initializing the stack, we set its value to -1 so that we can\n        check if the stack is empty by comparing{\" \"}\n        <span className='var'>TOP == -1</span>.\n      </p>\n      <p>\n        3. On pushing an element, we increase the value of TOP and place the new\n        element in the position pointed to by <span className='var'>TOP</span>\n      </p>\n      <p>\n        4. On popping an element, we return the element pointed to by{\" \"}\n        <span className='var'>TOP</span> and reduce its value.\n      </p>\n      <p>5. Before pushing, we check if the stack is already full</p>\n      <p>6. Before popping, we check if the stack is already empty</p>\n      <ImageWrapper\n        size='md'\n        url={third}\n        text='Working of Stack Data Structure'\n      />\n      <div className='divider'></div>\n      <h3 className='sub-title'>Stack Implementation in Java</h3>\n      <CodePreview\n        language='java'\n        code={`\n        // Stack implementation in Java\n\n        class Stack {\n          private int arr[];\n          private int top;\n          private int capacity;\n        \n          // Creating a stack\n          Stack(int size) {\n            arr = new int[size];\n            capacity = size;\n            top = -1;\n          }\n        \n          // Add elements into stack\n          public void push(int x) {\n            if (isFull()) {\n              System.out.println(\"OverFlow Program Terminated \");\n              System.exit(1);\n            }\n        \n            System.out.println(\"Inserting \" + x);\n            arr[++top] = x;\n          }\n        \n          // Remove element from stack\n          public int pop() {\n            if (isEmpty()) {\n              System.out.println(\"STACK EMPTY\");\n              System.exit(1);\n            }\n            return arr[top--];\n          }\n        \n          // Utility function to return the size of the stack\n          public int size() {\n            return top + 1;\n          }\n        \n          // Check if the stack is empty\n          public Boolean isEmpty() {\n            return top == -1;\n          }\n        \n          // Check if the stack is full\n          public Boolean isFull() {\n            return top == capacity - 1;\n          }\n        \n          public void printStack() {\n            for (int i = 0; i <= top; i++) {\n              System.out.println(arr[i]);\n            }\n          }\n        \n          public static void main(String[] args) {\n            Stack stack = new Stack(5);\n        \n            stack.push(1);\n            stack.push(2);\n            stack.push(3);\n            stack.push(4);\n        \n            stack.pop();\n            System.out.println(\"After popping out\");\n        \n            stack.printStack();\n        \n          }\n        }\n      `}\n      />\n      <div className='divider'></div>\n      <h3 className='sub-title'>Stack Time Complexity</h3>\n      <p>\n        For the array-based implementation of a stack, the push and pop\n        operations take constant time, i.e. <span className='var'>O(1)</span>.\n      </p>\n    </div>\n  )\n}\n\nexport default WhatIsStack\n"],"sourceRoot":""}