{"version":3,"sources":["assets/img/linked-list/linked-list-concept.webp","components/layer/ImageWrapper.js","components/layer/CodePreview.js","assets/img/linked-list/linked-list-with-data.webp","components/pages/Lists/WhatIsList.js"],"names":["module","exports","ImageWrapper","props","className","size","src","url","alt","text","CodePreview","code","language","style","docco","Column","Table","WhatIsList","first","second","dataSource","key","method","worst","best","title","dataIndex"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,kD,gCCA3C,oBAWeC,IATM,SAACC,GACpB,OACE,yBAAKC,UAAU,iBACb,yBAAKA,UAAWD,EAAME,KAAMC,IAAKH,EAAMI,IAAKC,IAAKL,EAAMI,MACvD,yBAAKH,UAAU,gBAAgBD,EAAMM,S,gCCN3C,sCAeeC,IAVK,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAC3B,OACE,yBAAKR,UAAU,QACb,kBAAC,IAAD,CAAmBQ,SAAUA,EAAUC,MAAOC,KAC3CH,M,oBCTTX,EAAOC,QAAU,IAA0B,oD,iCCA3C,wFAQQc,EAAWC,IAAXD,OAgNOE,UA9MI,WAsBjB,OACE,yBAAKb,UAAU,aACb,wBAAIA,UAAU,SAAd,8BACA,+KAIA,kBAAC,IAAD,CACEC,KAAK,MACLE,IAAKW,IACLT,KAAM,+BAER,0HAEsB,0BAAML,UAAU,OAAhB,SAEtB,yHAGE,0BAAMA,UAAU,OAAhB,SAEF,gLAKA,yBAAKA,UAAU,YACf,wBAAIA,UAAU,aAAd,iCACA,6GAIA,4BACE,2CACA,2DAEF,qGAGA,kBAAC,IAAD,CACEO,KAAI,yGAOJC,SAAS,MAEX,oHAIA,uLAKA,kBAAC,IAAD,CACED,KAAI,6pBAyBJC,SAAS,MAEX,0GAIA,kBAAC,IAAD,CACEP,KAAK,MACLE,IAAKY,IACLV,KAAK,iLAEP,8LAKA,4BACE,mFACA,uDACA,wGAIA,4FAEF,6IAIA,gIAIA,yBAAKL,UAAU,YACf,wBAAIA,UAAU,aAAd,uBACA,oLAKA,6OAKA,yBAAKA,UAAU,YACf,wBAAIA,UAAU,aAAd,8CAEA,kBAAC,IAAD,CACEO,KAAI,k/BAqCJC,SAAS,SAEX,yBAAKR,UAAU,YACf,wBAAIA,UAAU,aAAd,0BACA,8CACA,kBAAC,IAAD,CAAOgB,WApME,CACX,CACEC,IAAK,IACLC,OAAQ,SACRC,MAAO,OACPC,KAAM,QAER,CACEH,IAAK,IACLC,OAAQ,SACRC,MAAO,OACPC,KAAM,QAER,CACEH,IAAK,IACLC,OAAQ,WACRC,MAAO,OACPC,KAAM,UAoLJ,kBAACT,EAAD,CAAQU,MAAM,SAASC,UAAU,SAASL,IAAI,WAC9C,kBAACN,EAAD,CAAQU,MAAM,aAAaC,UAAU,QAAQL,IAAI,SACjD,kBAACN,EAAD,CAAQU,MAAM,eAAeC,UAAU,OAAOL,IAAI","file":"static/js/19.14b1dcc4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/linked-list-concept.41859ec7.webp\";","import React from \"react\"\n\nconst ImageWrapper = (props) => {\n  return (\n    <div className='image-wrapper'>\n      <img className={props.size} src={props.url} alt={props.url} />\n      <div className='image-bottom'>{props.text}</div>\n    </div>\n  )\n}\n\nexport default ImageWrapper\n","import React from \"react\"\n\nimport SyntaxHighlighter from \"react-syntax-highlighter\"\nimport { docco } from \"react-syntax-highlighter/dist/esm/styles/hljs\"\n\nconst CodePreview = ({ code, language }) => {\n  return (\n    <div className='Code'>\n      <SyntaxHighlighter language={language} style={docco}>\n        {code}\n      </SyntaxHighlighter>\n    </div>\n  )\n}\n\nexport default CodePreview\n","module.exports = __webpack_public_path__ + \"static/media/linked-list-with-data.9f64c5ca.webp\";","import React from \"react\"\nimport ImageWrapper from \"../../layer/ImageWrapper\"\nimport { Table } from \"antd\"\n\nimport first from \"../../../assets/img/linked-list/linked-list-concept.webp\"\nimport second from \"../../../assets/img/linked-list/linked-list-with-data.webp\"\nimport CodePreview from \"../../layer/CodePreview\"\n\nconst { Column } = Table\n\nconst WhatIsList = () => {\n  const data = [\n    {\n      key: \"1\",\n      method: \"Search\",\n      worst: \"O(n)\",\n      best: \"O(n)\",\n    },\n    {\n      key: \"2\",\n      method: \"Insert\",\n      worst: \"O(1)\",\n      best: \"O(1)\",\n    },\n    {\n      key: \"3\",\n      method: \"Deletion\",\n      worst: \"O(1)\",\n      best: \"O(1)\",\n    },\n  ]\n\n  return (\n    <div className='container'>\n      <h3 className='title'>Linked list Data Structure</h3>\n      <p>\n        A linked list data structure includes a series of connected nodes. Here,\n        each node store the data and the address of the next node. For example,\n      </p>\n      <ImageWrapper\n        size='big'\n        url={first}\n        text={\"Linked list Data Structure\"}\n      />\n      <p>\n        You have to start somewhere, so we give the address of the first node a\n        special name called <span className='var'>HEAD</span>\n      </p>\n      <p>\n        Also, the last node in the linked list can be identified because its\n        next portion points to\n        <span className='var'>NULL</span>\n      </p>\n      <p>\n        You might have played the game Treasure Hunt, where each clue includes\n        the information about the next clue. That is how the linked list\n        operates.\n      </p>\n      <div className='divider'></div>\n      <h3 className='sub-title'>Representation of Linked List</h3>\n      <p>\n        Let's see how each node of the linked list is represented. Each node\n        consists:\n      </p>\n      <ul>\n        <li>A data item</li>\n        <li>An address of another node</li>\n      </ul>\n      <p>\n        We wrap both the data item and the next node reference in a struct as:\n      </p>\n      <CodePreview\n        code={`\n        struct node\n        {\n          int data;\n          struct node *next;\n        }\n      `}\n        language='c'\n      />\n      <p>\n        Understanding the structure of a linked list node is the key to having a\n        grasp on it.\n      </p>\n      <p>\n        Each struct node has a data item and a pointer to another struct node.\n        Let us create a simple Linked List with three items to understand how\n        this works.\n      </p>\n      <CodePreview\n        code={`\n        /* Initialize nodes */\n        struct node *head;\n        struct node *one = NULL;\n        struct node *two = NULL;\n        struct node *three = NULL;\n        \n        /* Allocate memory */\n        one = malloc(sizeof(struct node));\n        two = malloc(sizeof(struct node));\n        three = malloc(sizeof(struct node));\n        \n        /* Assign data values */\n        one->data = 1;\n        two->data = 2;\n        three->data=3;\n        \n        /* Connect nodes */\n        one->next = two;\n        two->next = three;\n        three->next = NULL;\n        \n        /* Save address of first node in head */\n        head = one;\n      `}\n        language='c'\n      />\n      <p>\n        In just a few steps, we have created a simple linked list with three\n        nodes.\n      </p>\n      <ImageWrapper\n        size='big'\n        url={second}\n        text='Связанный список. Представление.'\n      />\n      <p>\n        The power of a linked list comes from the ability to break the chain and\n        rejoin it. E.g. if you wanted to put an element 4 between 1 and 2, the\n        steps would be:\n      </p>\n      <ul>\n        <li>Create a new struct node and allocate memory to it.</li>\n        <li>Add its data value as 4</li>\n        <li>\n          Point its next pointer to the struct node containing 2 as the data\n          value\n        </li>\n        <li>Change the next pointer of \"1\" to the node we just created.</li>\n      </ul>\n      <p>\n        Doing something similar in an array would have required shifting the\n        positions of all the subsequent elements.\n      </p>\n      <p>\n        In python and Java, the linked list can be implemented using classes as\n        shown in the codes below.\n      </p>\n      <div className='divider'></div>\n      <h3 className='sub-title'>Linked List Utility</h3>\n      <p>\n        Lists are one of the most popular and efficient data structures, with\n        implementation in every programming language like C, C++, Python, Java,\n        and C#.\n      </p>\n      <p>\n        Apart from that, linked lists are a great way to learn how pointers\n        work. By practicing how to manipulate linked lists, you can prepare\n        yourself to learn more advanced data structures like graphs and trees.\n      </p>\n      <div className='divider'></div>\n      <h3 className='sub-title'>Linked List Implementation in Java Example</h3>\n\n      <CodePreview\n        code={`\n          // Linked list implementation in Java\n\n          class LinkedList {\n            // Creating a node\n            Node head;\n\n            static class Node {\n              int value;\n              Node next;\n\n              Node(int d) {\n                value = d;\n                next = null;\n              }\n            }\n\n            public static void main(String[] args) {\n              LinkedList linkedList = new LinkedList();\n\n              // Assign value values\n              linkedList.head = new Node(1);\n              Node second = new Node(2);\n              Node third = new Node(3);\n\n              // Connect nodess\n              linkedList.head.next = second;\n              second.next = third;\n\n              // printing node-value\n              while (linkedList.head != null) {\n                System.out.print(linkedList.head.value + \" \");\n                linkedList.head = linkedList.head.next;\n              }\n            }\n          }\n      `}\n        language='java'\n      />\n      <div className='divider'></div>\n      <h3 className='sub-title'>Linked List Complexity</h3>\n      <p>Time Complexity</p>\n      <Table dataSource={data}>\n        <Column title='Method' dataIndex='method' key='method' />\n        <Column title='Worst case' dataIndex='worst' key='wors' />\n        <Column title='Average case' dataIndex='best' key='best' />\n      </Table>\n    </div>\n  )\n}\n\nexport default WhatIsList\n"],"sourceRoot":""}