{"version":3,"sources":["assets/img/bigO/big0.webp","assets/img/bigO/omega.webp","assets/img/bigO/theta.webp","components/layer/ImageWrapper.js","components/layer/CodePreview.js","components/pages/BigO/WhatIsBigO.js"],"names":["module","exports","ImageWrapper","props","className","size","src","url","alt","text","CodePreview","code","language","style","docco","WhatIsBigO","first","second","third"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,mC,oBCA3CD,EAAOC,QAAU,IAA0B,oC,oBCA3CD,EAAOC,QAAU,IAA0B,oC,gCCA3C,oBAWeC,IATM,SAACC,GACpB,OACE,yBAAKC,UAAU,iBACb,yBAAKA,UAAWD,EAAME,KAAMC,IAAKH,EAAMI,IAAKC,IAAKL,EAAMI,MACvD,yBAAKH,UAAU,gBAAgBD,EAAMM,S,gCCN3C,sCAeeC,IAVK,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAC3B,OACE,yBAAKR,UAAU,QACb,kBAAC,IAAD,CAAmBQ,SAAUA,EAAUC,MAAOC,KAC3CH,M,iCCTT,iGAsJeI,UA7II,WACjB,OACE,yBAAKX,UAAU,aACb,wBAAIA,UAAU,SAAd,iBACA,6NAKA,8KAKA,oKAIA,yBAAKA,UAAU,YACf,wBAAIA,UAAU,aAAd,wBACA,yMAKA,iKAIA,4KAIA,+KAKA,2EACA,4BACE,8CACA,8CACA,+CAEF,yBAAKA,UAAU,YACf,wBAAIA,UAAU,aAAd,+BACA,uKAIA,kBAAC,IAAD,CACEG,IAAKS,IACLP,KAAK,4CACLJ,KAAK,QAEP,kBAAC,IAAD,CACEM,KAAI,oJAIJC,SAAS,KAEX,iFACsD,IACpD,0BAAMR,UAAU,OAAhB,QAFF,sBAEuD,IACrD,0BAAMA,UAAU,OAAhB,WAHF,oEAI8B,0BAAMA,UAAU,OAAhB,KAJ9B,OAIiE,IAC/D,0BAAMA,UAAU,OAAhB,SALF,2BAK6D,IAC3D,mCANF,KAQA,+CACmB,0BAAMA,UAAU,OAAhB,KADnB,yEAEgD,IAC9C,0BAAMA,UAAU,OAAhB,WAHF,KAKA,4LAKA,yBAAKA,UAAU,YACf,wBAAIA,UAAU,aAAd,oCACA,yKAIA,kBAAC,IAAD,CACEG,IAAKU,IACLZ,KAAK,MACLI,KAAK,8CAEP,kBAAC,IAAD,CACEE,KAAI,sJAIJC,SAAS,KAEX,sNAKA,6HAIA,yBAAKR,UAAU,YACf,wBAAIA,UAAU,aAAd,oCACA,sPAMA,kBAAC,IAAD,CACEG,IAAKW,IACLT,KAAK,qDACLJ,KAAK,QAEP,yFACA,kBAAC,IAAD,CACEM,KAAI,yKAIJC,SAAS,KAEX,uPAKA","file":"static/js/16.790bcd29.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/big0.38be0723.webp\";","module.exports = __webpack_public_path__ + \"static/media/omega.227e49d5.webp\";","module.exports = __webpack_public_path__ + \"static/media/theta.bc7399b7.webp\";","import React from \"react\"\n\nconst ImageWrapper = (props) => {\n  return (\n    <div className='image-wrapper'>\n      <img className={props.size} src={props.url} alt={props.url} />\n      <div className='image-bottom'>{props.text}</div>\n    </div>\n  )\n}\n\nexport default ImageWrapper\n","import React from \"react\"\n\nimport SyntaxHighlighter from \"react-syntax-highlighter\"\nimport { docco } from \"react-syntax-highlighter/dist/esm/styles/hljs\"\n\nconst CodePreview = ({ code, language }) => {\n  return (\n    <div className='Code'>\n      <SyntaxHighlighter language={language} style={docco}>\n        {code}\n      </SyntaxHighlighter>\n    </div>\n  )\n}\n\nexport default CodePreview\n","import React from \"react\"\nimport ImageWrapper from \"../../layer/ImageWrapper\"\n\nimport first from \"../../../assets/img/bigO/big0.webp\"\nimport second from \"../../../assets/img/bigO/omega.webp\"\nimport third from \"../../../assets/img/bigO/theta.webp\"\n\nimport CodePreview from \"../../layer/CodePreview\"\n\nconst WhatIsBigO = () => {\n  return (\n    <div className='container'>\n      <h3 className='title'>What is Big O</h3>\n      <p>\n        The efficiency of an algorithm depends on the amount of time, storage\n        and other resources required to execute the algorithm. The efficiency is\n        measured with the help of asymptotic notations.\n      </p>\n      <p>\n        An algorithm may not have the same performance for different types of\n        inputs. With the increase in the input size, the performance will\n        change.\n      </p>\n      <p>\n        The study of change in performance of the algorithm with the change in\n        the order of the input size is defined as asymptotic analysis.\n      </p>\n      <div className='divider'></div>\n      <h3 className='sub-title'>Asymptotic Notations</h3>\n      <p>\n        Asymptotic notations are the mathematical notations used to describe the\n        running time of an algorithm when the input tends towards a particular\n        value or a limiting value.\n      </p>\n      <p>\n        For example: In bubble sort, when the input array is already sorted, the\n        time taken by the algorithm is linear i.e. the best case.\n      </p>\n      <p>\n        But, when the input array is in reverse condition, the algorithm takes\n        the maximum time (quadratic) to sort the elements i.e. the worst case.\n      </p>\n      <p>\n        When the input array is neither sorted nor in reverse order, then it\n        takes average time. These durations are denoted using asymptotic\n        notations.\n      </p>\n      <p>There are mainly three asymptotic notations:</p>\n      <ul>\n        <li>Big-O notation</li>\n        <li>Omega notation</li>\n        <li>Theta notation</li>\n      </ul>\n      <div className='divider'></div>\n      <h3 className='sub-title'>Big-O Notation (O-notation)</h3>\n      <p>\n        Big-O notation represents the upper bound of the running time of an\n        algorithm. Thus, it gives the worst-case complexity of an algorithm.\n      </p>\n      <ImageWrapper\n        url={first}\n        text='Big-O gives the upper bound of a function'\n        size='big'\n      />\n      <CodePreview\n        code={`\n        O(g(n)) = { f(n): there exist positive constants c and n0\n          such that 0 ≤ f(n) ≤ cg(n) for all n ≥ n0 }\n      `}\n        language=''\n      />\n      <p>\n        The above expression can be described as a function{\" \"}\n        <span className='var'>f(n)</span> belongs to the set{\" \"}\n        <span className='var'>O(g(n))</span> if there exists a positive constant\n        c such that it lies between <span className='var'>0</span> and{\" \"}\n        <span className='var'>cg(n)</span>, for sufficiently large{\" \"}\n        <span>n</span>.\n      </p>\n      <p>\n        For any value of <span className='var'>n</span>, the running time of an\n        algorithm does not cross the time provided by{\" \"}\n        <span className='var'>O(g(n))</span>.\n      </p>\n      <p>\n        Since it gives the worst-case running time of an algorithm, it is widely\n        used to analyze an algorithm as we are always interested in the\n        worst-case scenario.\n      </p>\n      <div className='divider'></div>\n      <h3 className='sub-title'>Omega Notation (Ω-notation)</h3>\n      <p>\n        Omega notation represents the lower bound of the running time of an\n        algorithm. Thus, it provides the best case complexity of an algorithm.\n      </p>\n      <ImageWrapper\n        url={second}\n        size='big'\n        text='Omega gives the lower bound of a function'\n      />\n      <CodePreview\n        code={`\n      Ω(g(n)) = { f(n): there exist positive constants c and n0 \n        such that 0 ≤ cg(n) ≤ f(n) for all n ≥ n0 }\n      `}\n        language=''\n      />\n      <p>\n        The above expression can be described as a function f(n) belongs to the\n        set Ω(g(n)) if there exists a positive constant c such that it lies\n        above cg(n), for sufficiently large n.\n      </p>\n      <p>\n        For any value of n, the minimum time required by the algorithm is given\n        by Omega Ω(g(n)).\n      </p>\n      <div className='divider'></div>\n      <h3 className='sub-title'>Theta Notation (Θ-notation)</h3>\n      <p>\n        Theta notation encloses the function from above and below. Since it\n        represents the upper and the lower bound of the running time of an\n        algorithm, it is used for analyzing the average-case complexity of an\n        algorithm.\n      </p>\n      <ImageWrapper\n        url={third}\n        text='Theta bounds the function within constants factors'\n        size='big'\n      />\n      <p>For a function g(n), Θ(g(n)) is given by the relation</p>\n      <CodePreview\n        code={`\n      Θ(g(n)) = { f(n): there exist positive constants c1, c2 and n0\n        such that 0 ≤ c1g(n) ≤ f(n) ≤ c2g(n) for all n ≥ n0 }\n      `}\n        language=''\n      />\n      <p>\n        The above expression can be described as a function f(n) belongs to the\n        set Θ(g(n)) if there exist positive constants c1 and c2 such that it can\n        be sandwiched between c1g(n) and c2g(n), for sufficiently large n.\n      </p>\n      <p>\n        If a function f(n) lies anywhere in between c1g(n) and c2g(n) for all n\n        ≥ n0, then f(n) is said to be asymptotically tight bound.\n      </p>\n    </div>\n  )\n}\n\nexport default WhatIsBigO\n"],"sourceRoot":""}