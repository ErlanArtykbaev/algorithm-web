{"version":3,"sources":["components/layer/ImageWrapper.js","components/layer/CodePreview.js","assets/img/graph/facebook-graph.webp","assets/img/graph/graph-vertices-edges_0.webp","assets/img/graph/adjacency-matrix_1.webp","assets/img/graph/adjacency-list.webp","components/pages/Graph/WhatIsGraph.js"],"names":["ImageWrapper","props","className","size","src","url","alt","text","CodePreview","code","language","style","docco","module","exports","WhatIsGraph","first","second","third","fourth"],"mappings":"sHAAA,oBAWeA,IATM,SAACC,GACpB,OACE,yBAAKC,UAAU,iBACb,yBAAKA,UAAWD,EAAME,KAAMC,IAAKH,EAAMI,IAAKC,IAAKL,EAAMI,MACvD,yBAAKH,UAAU,gBAAgBD,EAAMM,S,gCCN3C,sCAeeC,IAVK,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAC3B,OACE,yBAAKR,UAAU,QACb,kBAAC,IAAD,CAAmBQ,SAAUA,EAAUC,MAAOC,KAC3CH,M,oBCTTI,EAAOC,QAAU,IAA0B,6C,oBCA3CD,EAAOC,QAAU,IAA0B,qD,oBCA3CD,EAAOC,QAAU,IAA0B,iD,oBCA3CD,EAAOC,QAAU,IAA0B,6C,iCCA3C,mHA2HeC,UAlHK,WAClB,OACE,yBAAKb,UAAU,aACb,wBAAIA,UAAU,SAAd,uBACA,+HAIA,8OAKA,8LAKA,kBAAC,IAAD,CACEC,KAAK,KACLE,IAAKW,IACLT,KAAK,oCAEP,qKAIA,kGACA,4BACE,0DACA,wGAKF,kBAAC,IAAD,CAAcJ,KAAK,KAAKE,IAAKY,IAAQV,KAAK,uBAC1C,4CACA,kBAAC,IAAD,CACEE,KAAI,qGAKJC,SAAS,MAEX,yBAAKR,UAAU,YACf,wBAAIA,UAAU,aAAd,qBACA,4BACE,4BACE,6CADF,qKAKA,4BACE,wCADF,iJAKA,4BACE,kDADF,2LAOF,yBAAKA,UAAU,YACf,wBAAIA,UAAU,aAAd,wBACA,2EACA,wBAAIA,UAAU,iBAAd,uBACA,2HAIA,0DAC8B,0BAAMA,UAAU,OAAhB,WAD9B,gFAIA,qFACA,kBAAC,IAAD,CAAcC,KAAK,MAAME,IAAKa,IAAOX,KAAK,2BAC1C,0KAIA,sQAMA,wBAAIL,UAAU,iBAAd,qBACA,gGACA,8KAKA,2GAIA,kBAAC,IAAD,CACEC,KAAK,MACLE,IAAKc,IACLZ,KAAK,kCAEP","file":"static/js/13.257cb2b0.chunk.js","sourcesContent":["import React from \"react\"\n\nconst ImageWrapper = (props) => {\n  return (\n    <div className='image-wrapper'>\n      <img className={props.size} src={props.url} alt={props.url} />\n      <div className='image-bottom'>{props.text}</div>\n    </div>\n  )\n}\n\nexport default ImageWrapper\n","import React from \"react\"\n\nimport SyntaxHighlighter from \"react-syntax-highlighter\"\nimport { docco } from \"react-syntax-highlighter/dist/esm/styles/hljs\"\n\nconst CodePreview = ({ code, language }) => {\n  return (\n    <div className='Code'>\n      <SyntaxHighlighter language={language} style={docco}>\n        {code}\n      </SyntaxHighlighter>\n    </div>\n  )\n}\n\nexport default CodePreview\n","module.exports = __webpack_public_path__ + \"static/media/facebook-graph.37edeab4.webp\";","module.exports = __webpack_public_path__ + \"static/media/graph-vertices-edges_0.899f8e56.webp\";","module.exports = __webpack_public_path__ + \"static/media/adjacency-matrix_1.d590e7a0.webp\";","module.exports = __webpack_public_path__ + \"static/media/adjacency-list.80bd60f1.webp\";","import React from \"react\"\nimport ImageWrapper from \"../../layer/ImageWrapper\"\n\nimport first from \"../../../assets/img/graph/facebook-graph.webp\"\nimport second from \"../../../assets/img/graph/graph-vertices-edges_0.webp\"\nimport third from \"../../../assets/img/graph/adjacency-matrix_1.webp\"\nimport fourth from \"../../../assets/img/graph/adjacency-list.webp\"\nimport CodePreview from \"../../layer/CodePreview\"\n\nconst WhatIsGraph = () => {\n  return (\n    <div className='container'>\n      <h3 className='title'>Graph Data Stucture</h3>\n      <p>\n        A graph data structure is a collection of nodes that have data and are\n        connected to other nodes.\n      </p>\n      <p>\n        Let's try to understand this through an example. On facebook, everything\n        is a node. That includes User, Photo, Album, Event, Group, Page,\n        Comment, Story, Video, Link, Note...anything that has data is a node.\n      </p>\n      <p>\n        Every relationship is an edge from one node to another. Whether you post\n        a photo, join a group, like a page, etc., a new edge is created for that\n        relationship.\n      </p>\n      <ImageWrapper\n        size='md'\n        url={first}\n        text='Example of graph data structure'\n      />\n      <p>\n        All of facebook is then a collection of these nodes and edges. This is\n        because facebook uses a graph data structure to store its data.\n      </p>\n      <p>More precisely, a graph is a data structure (V, E) that consists of</p>\n      <ul>\n        <li>A collection of vertices V</li>\n        <li>\n          A collection of edges E, represented as ordered pairs of vertices\n          (u,v)\n        </li>\n      </ul>\n      <ImageWrapper size='md' url={second} text='Vertices and edges' />\n      <p>In the graph,</p>\n      <CodePreview\n        code={`\n        V = {0, 1, 2, 3}\n        E = {(0,1), (0,2), (0,3), (1,2)}\n        G = {V, E}\n        `}\n        language='c'\n      />\n      <div className='divider'></div>\n      <h3 className='sub-title'>Graph Terminology</h3>\n      <ul>\n        <li>\n          <strong>Adjacency</strong>: A vertex is said to be adjacent to another\n          vertex if there is an edge connecting them. Vertices 2 and 3 are not\n          adjacent because there is no edge between them.\n        </li>\n        <li>\n          <strong>Path</strong>: A sequence of edges that allows you to go from\n          vertex A to vertex B is called a path. 0-1, 1-2 and 0-2 are paths from\n          vertex 0 to vertex 2.\n        </li>\n        <li>\n          <strong>Directed Graph</strong>: A graph in which an edge (u,v)\n          doesn't necessarily mean that there is an edge (v, u) as well. The\n          edges in such a graph are represented by arrows to show the direction\n          of the edge.\n        </li>\n      </ul>\n      <div className='divider'></div>\n      <h3 className='sub-title'>Graph Representation</h3>\n      <p>Graphs are commonly represented in two ways:</p>\n      <h3 className='sub-sub-title'>1. Adjacency Matrix</h3>\n      <p>\n        An adjacency matrix is a 2D array of V x V vertices. Each row and column\n        represent a vertex.\n      </p>\n      <p>\n        If the value of any element <span className='var'>a[i][j]</span> is 1,\n        it represents that there is an edge connecting vertex i and vertex j.\n      </p>\n      <p>The adjacency matrix for the graph we created above is</p>\n      <ImageWrapper size='big' url={third} text='Graph adjacency matrix' />\n      <p>\n        Since it is an undirected graph, for edge (0,2), we also need to mark\n        edge (2,0); making the adjacency matrix symmetric about the diagonal.\n      </p>\n      <p>\n        Edge lookup(checking if an edge exists between vertex A and vertex B) is\n        extremely fast in adjacency matrix representation but we have to reserve\n        space for every possible link between all vertices(V x V), so it\n        requires more space.\n      </p>\n      <h3 className='sub-sub-title'>2. Adjacency List</h3>\n      <p>An adjacency list represents a graph as an array of linked lists.</p>\n      <p>\n        The index of the array represents a vertex and each element in its\n        linked list represents the other vertices that form an edge with the\n        vertex.\n      </p>\n      <p>\n        The adjacency list for the graph we made in the first example is as\n        follows:\n      </p>\n      <ImageWrapper\n        size='big'\n        url={fourth}\n        text='Adjacency list representation'\n      />\n      <p>\n        An adjacency list is efficient in terms of storage because we only need\n        to store the values for the edges. For a graph with millions of\n        vertices, this can mean a lot of saved space.\n      </p>\n    </div>\n  )\n}\n\nexport default WhatIsGraph\n"],"sourceRoot":""}