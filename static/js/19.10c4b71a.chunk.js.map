{"version":3,"sources":["components/layer/ImageWrapper.js","components/layer/CodePreview.js","assets/img/queues/queue.webp","assets/img/queues/Big-queue.webp","components/pages/Queues/Queues.js"],"names":["ImageWrapper","props","className","size","src","url","alt","text","CodePreview","code","language","style","docco","module","exports","Queues","first","second"],"mappings":"sHAAA,oBAWeA,IATM,SAACC,GACpB,OACE,yBAAKC,UAAU,iBACb,yBAAKA,UAAWD,EAAME,KAAMC,IAAKH,EAAMI,IAAKC,IAAKL,EAAMI,MACvD,yBAAKH,UAAU,gBAAgBD,EAAMM,S,gCCN3C,sCAeeC,IAVK,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAC3B,OACE,yBAAKR,UAAU,QACb,kBAAC,IAAD,CAAmBQ,SAAUA,EAAUC,MAAOC,KAC3CH,M,oBCTTI,EAAOC,QAAU,IAA0B,oC,oBCA3CD,EAAOC,QAAU,IAA0B,wC,iCCA3C,+EA0MeC,UAlMA,WACb,OACE,yBAAKb,UAAU,aACb,wBAAIA,UAAU,SAAd,wBACA,6NAKA,gDACoB,6DADpB,iIAKA,kBAAC,IAAD,CACEC,KAAK,MACLE,IAAKW,IACLT,KAAK,iCAEP,8JAE6D,IAC3D,wCAHF,SAKA,wFAC6D,IAC3D,2CAFF,gDAEwE,IACtE,2CAHF,KAKA,qKAIA,yBAAKL,UAAU,YACf,wBAAIA,UAAU,aAAd,6BACA,4HAIA,4BACE,4BACE,4CADF,2CAGA,4BACE,4CADF,kDAIA,4BACE,4CADF,gCAGA,4BACE,2CADF,+BAGA,4BACE,yCADF,iEAKF,yBAAKA,UAAU,YACf,wBAAIA,UAAU,aAAd,oBACA,gEACA,4BACE,2DACA,0EACA,wEACA,6EAEF,wBAAIA,UAAU,aAAd,qBACA,4BACE,0DACA,kFACA,4DACA,uFAEF,wBAAIA,UAAU,aAAd,qBACA,4BACE,2DACA,iEACA,6DACA,+FAEF,kBAAC,IAAD,CACEC,KAAK,MACLE,IAAKY,IACLV,KAAK,mCAEP,yBAAKL,UAAU,YACf,wBAAIA,UAAU,aAAd,gCACA,kBAAC,IAAD,CACEO,KAAI","file":"static/js/19.10c4b71a.chunk.js","sourcesContent":["import React from \"react\"\n\nconst ImageWrapper = (props) => {\n  return (\n    <div className='image-wrapper'>\n      <img className={props.size} src={props.url} alt={props.url} />\n      <div className='image-bottom'>{props.text}</div>\n    </div>\n  )\n}\n\nexport default ImageWrapper\n","import React from \"react\"\n\nimport SyntaxHighlighter from \"react-syntax-highlighter\"\nimport { docco } from \"react-syntax-highlighter/dist/esm/styles/hljs\"\n\nconst CodePreview = ({ code, language }) => {\n  return (\n    <div className='Code'>\n      <SyntaxHighlighter language={language} style={docco}>\n        {code}\n      </SyntaxHighlighter>\n    </div>\n  )\n}\n\nexport default CodePreview\n","module.exports = __webpack_public_path__ + \"static/media/queue.3d69c961.webp\";","module.exports = __webpack_public_path__ + \"static/media/Big-queue.e41fb8d0.webp\";","import React from \"react\"\n\nimport ImageWrapper from \"../../layer/ImageWrapper\"\n\nimport first from \"../../../assets/img/queues/queue.webp\"\nimport second from \"../../../assets/img/queues/Big-queue.webp\"\nimport CodePreview from \"../../layer/CodePreview\"\n\nconst Queues = () => {\n  return (\n    <div className='container'>\n      <h3 className='title'>Queue Data Structure</h3>\n      <p>\n        A queue is a useful data structure in programming. It is similar to the\n        ticket queue outside a cinema hall, where the first person entering the\n        queue is the first person who gets the ticket.\n      </p>\n      <p>\n        Queue follows the <strong>First In First Out (FIFO)</strong> rule - the\n        item that goes in first is the item that comes out first. Representation\n        of Queue in first in first out principle\n      </p>\n      <ImageWrapper\n        size='big'\n        url={first}\n        text='FIFO Representation of Queue'\n      />\n      <p>\n        In the above image, since 1 was kept in the queue before 2, it is the\n        first to be removed from the queue as well. It follows the{\" \"}\n        <strong>FIFO</strong>rule.\n      </p>\n      <p>\n        In programming terms, putting items in the queue is called{\" \"}\n        <strong>enqueue</strong>, and removing items from the queue is called{\" \"}\n        <strong>dequeue</strong>.\n      </p>\n      <p>\n        We can implement the queue in any programming language like C, C++,\n        Java, Python or C#, but the specification is pretty much the same.\n      </p>\n      <div className='divider'></div>\n      <h3 className='sub-title'>Basic Operations of Queue</h3>\n      <p>\n        A queue is an object (an abstract data structure - ADT) that allows the\n        following operations:\n      </p>\n      <ul>\n        <li>\n          <strong>Enqueue:</strong> Add an element to the end of the queue\n        </li>\n        <li>\n          <strong>Dequeue:</strong> Remove an element from the front of the\n          queue\n        </li>\n        <li>\n          <strong>IsEmpty:</strong> Check if the queue is empty\n        </li>\n        <li>\n          <strong>IsFull:</strong> Check if the queue is full\n        </li>\n        <li>\n          <strong>Peek:</strong> Get the value of the front of the queue without\n          removing it\n        </li>\n      </ul>\n      <div className='divider'></div>\n      <h3 className='sub-title'>Working of Queue</h3>\n      <p>Queue operations work as follows:</p>\n      <ul>\n        <li>two pointers FRONT and REAR</li>\n        <li>FRONT track the first element of the queue</li>\n        <li>REAR track the last element of the queue</li>\n        <li>initially, set value of FRONT and REAR to -1</li>\n      </ul>\n      <h3 className='sub-title'>Enqueue Operation</h3>\n      <ul>\n        <li>check if the queue is full</li>\n        <li>for the first element, set the value of FRONT to 0</li>\n        <li>increase the REAR index by 1</li>\n        <li>add the new element in the position pointed to by REAR</li>\n      </ul>\n      <h3 className='sub-title'>Dequeue Operation</h3>\n      <ul>\n        <li>check if the queue is empty</li>\n        <li>return the value pointed by FRONT</li>\n        <li>increase the FRONT index by 1</li>\n        <li>for the last element, reset the values of FRONT and REAR to -1</li>\n      </ul>\n      <ImageWrapper\n        size='big'\n        url={second}\n        text='Enqueue and Dequeue Operations'\n      />\n      <div className='divider'></div>\n      <h3 className='sub-title'>Queue Implementation in Java</h3>\n      <CodePreview\n        code={`\n        // Queue implementation in Java\n\n        public class Queue {\n          int SIZE = 5;\n          int items[] = new int[SIZE];\n          int front, rear;\n        \n          Queue() {\n            front = -1;\n            rear = -1;\n          }\n        \n          boolean isFull() {\n            if (front == 0 && rear == SIZE - 1) {\n              return true;\n            }\n            return false;\n          }\n        \n          boolean isEmpty() {\n            if (front == -1)\n              return true;\n            else\n              return false;\n          }\n        \n          void enQueue(int element) {\n            if (isFull()) {\n              System.out.println(\"Queue is full\");\n            } else {\n              if (front == -1)\n                front = 0;\n              rear++;\n              items[rear] = element;\n              System.out.println(\"Inserted \" + element);\n            }\n          }\n        \n          int deQueue() {\n            int element;\n            if (isEmpty()) {\n              System.out.println(\"Queue is empty\");\n              return (-1);\n            } else {\n              element = items[front];\n              if (front >= rear) {\n                front = -1;\n                rear = -1;\n              } /* Q has only one element, so we reset the queue after deleting it. */\n              else {\n                front++;\n              }\n              System.out.println(\"Deleted -> \" + element);\n              return (element);\n            }\n          }\n        \n          void display() {\n            /* Function to display elements of Queue */\n            int i;\n            if (isEmpty()) {\n              System.out.println(\"Empty Queue\");\n            } else {\n              System.out.println(\"Front index-> \" + front);\n              System.out.println(\"Items -> \");\n              for (i = front; i <= rear; i++)\n                System.out.print(items[i] + \"  \");\n        \n              System.out.println(\"Rear index-> \" + rear);\n            }\n          }\n        \n          public static void main(String[] args) {\n            Queue q = new Queue();\n        \n            // deQueue is not possible on empty queue\n            q.deQueue();\n        \n            // enQueue 5 elements\n            q.enQueue(1);\n            q.enQueue(2);\n            q.enQueue(3);\n            q.enQueue(4);\n            q.enQueue(5);\n        \n            // 6th element can't be added to because the queue is full\n            q.enQueue(6);\n        \n            q.display();\n        \n            // deQueue removes element entered first i.e. 1\n            q.deQueue();\n        \n            // Now we have just 4 elements\n            q.display();\n        \n          }\n        }\n      `}\n      />\n    </div>\n  )\n}\n\nexport default Queues\n"],"sourceRoot":""}