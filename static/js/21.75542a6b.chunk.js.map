{"version":3,"sources":["assets/img/sort/sorting.webp","assets/img/sort/unstable-sorting.webp","assets/img/sort/stable-sorting.webp","components/layer/ImageWrapper.js","components/pages/Sort/WhatIsSort.js"],"names":["module","exports","ImageWrapper","props","className","size","src","url","alt","text","WhatIsSort","first","dataSource","key","name","space","columns","title","dataIndex","second","third"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,sC,oBCA3CD,EAAOC,QAAU,IAA0B,+C,oBCA3CD,EAAOC,QAAU,IAA0B,6C,gCCA3C,oBAWeC,IATM,SAACC,GACpB,OACE,yBAAKC,UAAU,iBACb,yBAAKA,UAAWD,EAAME,KAAMC,IAAKH,EAAMI,IAAKC,IAAKL,EAAMI,MACvD,yBAAKH,UAAU,gBAAgBD,EAAMM,S,iCCN3C,kGA2JeC,UAjJI,WAsEjB,OACE,yBAAKN,UAAU,aACb,wBAAIA,UAAU,SAAd,WACA,iIAIA,kBAAC,IAAD,CAAcG,IAAKI,IAAOF,KAAK,mBAAmBJ,KAAK,OACvD,iFACA,wKAIA,yBAAKD,UAAU,YACf,wBAAIA,UAAU,aAAd,gCACA,4BACE,2CACA,8CACA,yCACA,0CACA,+CAEF,yBAAKA,UAAU,YACf,wBAAIA,UAAU,aAAd,oCACA,kJAIA,2BACE,uDADF,wKAKA,iDACA,2BACE,wDADF,+JAKA,8NAKA,+FACA,kBAAC,IAAD,CAAOQ,WAlHQ,CACjB,CACEC,IAAK,IACLC,KAAM,cACN,YAAa,IACb,aAAc,KACd,eAAgB,KAChBC,MAAO,KAET,CACEF,IAAK,IACLC,KAAM,iBACN,YAAa,KACb,aAAc,KACd,eAAgB,KAChBC,MAAO,KAET,CACEF,IAAK,IACLC,KAAM,iBACN,YAAa,IACb,aAAc,KACd,eAAgB,KAChBC,MAAO,KAET,CACEF,IAAK,IACLC,KAAM,aACN,YAAa,UACb,aAAc,UACd,eAAgB,UAChBC,MAAO,KAET,CACEF,IAAK,IACLC,KAAM,aACN,YAAa,UACb,aAAc,KACd,eAAgB,UAChBC,MAAO,UA2EwBC,QAxEnB,CACd,CACEC,MAAO,oBACPC,UAAW,OACXL,IAAK,QAEP,CACEI,MAAO,yBACPC,UAAW,YACXL,IAAK,aAEP,CACEI,MAAO,0BACPC,UAAW,aACXL,IAAK,cAEP,CACEI,MAAO,4BACPC,UAAW,eACXL,IAAK,gBAEP,CACEI,MAAO,mBACPC,UAAW,QACXL,IAAK,YAiDL,yBAAKT,UAAU,YACf,wBAAIA,UAAU,aAAd,kCACA,6KAIA,4NAKA,kBAAC,IAAD,CACEG,IAAKY,IACLV,KAAK,8CACLJ,KAAK,OAEP,sKAIA,kBAAC,IAAD,CACEE,IAAKa,IACLX,KAAK,8CACLJ,KAAK","file":"static/js/21.75542a6b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sorting.67fb36f1.webp\";","module.exports = __webpack_public_path__ + \"static/media/unstable-sorting.336d469b.webp\";","module.exports = __webpack_public_path__ + \"static/media/stable-sorting.fcb6f29f.webp\";","import React from \"react\"\n\nconst ImageWrapper = (props) => {\n  return (\n    <div className='image-wrapper'>\n      <img className={props.size} src={props.url} alt={props.url} />\n      <div className='image-bottom'>{props.text}</div>\n    </div>\n  )\n}\n\nexport default ImageWrapper\n","import React from \"react\";\n\nimport { Table } from \"antd\";\n\nimport ImageWrapper from \"../../layer/ImageWrapper\";\n\nimport first from \"../../../assets/img/sort/sorting.webp\";\nimport second from \"../../../assets/img/sort/unstable-sorting.webp\";\nimport third from \"../../../assets/img/sort/stable-sorting.webp\";\n\nconst WhatIsSort = () => {\n  const dataSource = [\n    {\n      key: \"1\",\n      name: \"Bubble Sort\",\n      \"time-best\": \"n\",\n      \"time-worst\": \"n2\",\n      \"time-average\": \"n2\",\n      space: \"1\",\n    },\n    {\n      key: \"2\",\n      name: \"Selection Sort\",\n      \"time-best\": \"n2\",\n      \"time-worst\": \"n2\",\n      \"time-average\": \"n2\",\n      space: \"1\",\n    },\n    {\n      key: \"3\",\n      name: \"Insertion Sort\",\n      \"time-best\": \"n\",\n      \"time-worst\": \"n2\",\n      \"time-average\": \"n2\",\n      space: \"1\",\n    },\n    {\n      key: \"4\",\n      name: \"Merge Sort\",\n      \"time-best\": \"n log n\",\n      \"time-worst\": \"n log n\",\n      \"time-average\": \"n log n\",\n      space: \"n\",\n    },\n    {\n      key: \"5\",\n      name: \"Quick Sort\",\n      \"time-best\": \"n log n\",\n      \"time-worst\": \"n2\",\n      \"time-average\": \"n log n\",\n      space: \"log n\",\n    },\n  ];\n  const columns = [\n    {\n      title: \"Sorting Algorithm\",\n      dataIndex: \"name\",\n      key: \"name\",\n    },\n    {\n      title: \"Time Complexity - Best\",\n      dataIndex: \"time-best\",\n      key: \"time-best\",\n    },\n    {\n      title: \"Time Complexity - Worst\",\n      dataIndex: \"time-worst\",\n      key: \"time-worst\",\n    },\n    {\n      title: \"Time Complexity - Average\",\n      dataIndex: \"time-average\",\n      key: \"time-average\",\n    },\n    {\n      title: \"Space Complexity\",\n      dataIndex: \"space\",\n      key: \"space\",\n    },\n  ];\n  return (\n    <div className=\"container\">\n      <h3 className=\"title\">Sorting</h3>\n      <p>\n        A sorting algorithm is used to arrange elements of an array/list in a\n        specific order. For example,\n      </p>\n      <ImageWrapper url={first} text=\"Sorting an array\" size=\"md\" />\n      <p>Here, we are sorting the array in ascending order.</p>\n      <p>\n        There are various sorting algorithms that can be used to complete this\n        operation. And, we can use any algorithm based on the requirement.\n      </p>\n      <div className=\"divider\"></div>\n      <h3 className=\"sub-title\">Different Sorting Algorithms</h3>\n      <ul>\n        <li>Bubble Sort</li>\n        <li>Selection Sort</li>\n        <li>Quicksort</li>\n        <li>Merge Sort</li>\n        <li>Insertion Sort</li>\n      </ul>\n      <div className=\"divider\"></div>\n      <h3 className=\"sub-title\">Complexity of Sorting Algorithms</h3>\n      <p>\n        The efficiency of any sorting algorithm is determined by the time\n        complexity and space complexity of the algorithm.\n      </p>\n      <p>\n        <strong>1. Time Complexity:</strong> Time complexity refers to the time\n        taken by an algorithm to complete its execution with respect to the size\n        of the input. It can be represented in different forms:\n      </p>\n      <p>Big-O notation (O)</p>\n      <p>\n        <strong>2. Space Complexity:</strong> Space complexity refers to the\n        total amount of memory used by the algorithm for a complete execution.\n        It includes both the auxiliary memory and the input.\n      </p>\n      <p>\n        The auxiliary memory is the additional space occupied by the algorithm\n        apart from the input data. Usually, auxiliary memory is considered for\n        calculating the space complexity of an algorithm.\n      </p>\n      <p>Let's see a complexity analysis of different sorting algorithms.</p>\n      <Table dataSource={dataSource} columns={columns} />\n      <div className=\"divider\"></div>\n      <h3 className=\"sub-title\">Stability of Sorting Algorithm</h3>\n      <p>\n        A sorting algorithm is considered stable if the two or more items with\n        the same value maintain the same relative positions even after sorting.\n      </p>\n      <p>\n        For example, in the image below, there are two items with the same value\n        3. An unstable sorting algorithm allows two possibilities where the two\n        positions of 3 may or may not be maintained.\n      </p>\n      <ImageWrapper\n        url={second}\n        text=\"Unstable sorting with two possible outcomes\"\n        size=\"md\"\n      />\n      <p>\n        However, after a stable sorting algorithm, there is always one\n        possibility where the positions are maintained as in the original array.\n      </p>\n      <ImageWrapper\n        url={third}\n        text=\"Stable sorting with the positions preserved\"\n        size=\"md\"\n      />\n    </div>\n  );\n};\n\nexport default WhatIsSort;\n"],"sourceRoot":""}