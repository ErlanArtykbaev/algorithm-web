{"version":3,"sources":["components/layer/ImageWrapper.js","components/layer/CodePreview.js","assets/img/queues/Introduction.webp","assets/img/queues/insert-1_0.webp","assets/img/queues/insert-2_0.webp","assets/img/queues/delete-1_0.webp","assets/img/queues/delete-2_0.webp","assets/img/queues/delete-3.webp","assets/img/queues/delete-4.webp","components/pages/Queues/PriorityQueue.js"],"names":["ImageWrapper","props","className","size","src","url","alt","text","CodePreview","code","language","style","docco","module","exports","Column","Table","PriorityQueue","first","dataSource","key","method","peek","insert","delete","title","dataIndex","second","third","fourth","fifth","six","seven"],"mappings":"qHAAA,oBAWeA,IATM,SAACC,GACpB,OACE,yBAAKC,UAAU,iBACb,yBAAKA,UAAWD,EAAME,KAAMC,IAAKH,EAAMI,IAAKC,IAAKL,EAAMI,MACvD,yBAAKH,UAAU,gBAAgBD,EAAMM,S,gCCN3C,sCAeeC,IAVK,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAC3B,OACE,yBAAKR,UAAU,QACb,kBAAC,IAAD,CAAmBQ,SAAUA,EAAUC,MAAOC,KAC3CH,M,oBCTTI,EAAOC,QAAU,IAA0B,2C,oBCA3CD,EAAOC,QAAU,IAA0B,yC,oBCA3CD,EAAOC,QAAU,IAA0B,yC,oBCA3CD,EAAOC,QAAU,IAA0B,yC,oBCA3CD,EAAOC,QAAU,IAA0B,yC,oBCA3CD,EAAOC,QAAU,IAA0B,uC,oBCA3CD,EAAOC,QAAU,IAA0B,uC,iCCA3C,kLAaQC,EAAWC,IAAXD,OAmROE,UAlRO,WAwBpB,OACE,yBAAKf,UAAU,aACb,wBAAIA,UAAU,SAAd,kBACA,wQAMA,mHAIA,qSAMA,kBAAC,IAAD,CACEC,KAAK,KACLE,IAAKa,IACLX,KAAK,sCAEP,yBAAKL,UAAU,YACf,wBAAIA,UAAU,aAAd,sDAGA,4NAKA,yBAAKA,UAAU,YACf,wBAAIA,UAAU,aAAd,oCACA,yPAMA,iQAMA,oHAIA,kBAAC,IAAD,CAAOiB,WA1EE,CACX,CACEC,IAAK,IACLC,OAAQ,cACRC,KAAM,OACNC,OAAQ,OACRC,OAAQ,QAEV,CACEJ,IAAK,IACLC,OAAQ,cACRC,KAAM,OACNC,OAAQ,WACRC,OAAQ,YAEV,CACEJ,IAAK,IACLC,OAAQ,qBACRC,KAAM,OACNC,OAAQ,WACRC,OAAQ,cAuDN,kBAACT,EAAD,CAAQU,MAAM,aAAaC,UAAU,SAASN,IAAI,WAClD,kBAACL,EAAD,CAAQU,MAAM,OAAOC,UAAU,OAAON,IAAI,SAC1C,kBAACL,EAAD,CAAQU,MAAM,SAASC,UAAU,SAASN,IAAI,WAC9C,kBAACL,EAAD,CAAQU,MAAM,SAASC,UAAU,SAASN,IAAI,YAEhD,yBAAKlB,UAAU,YACf,wBAAIA,UAAU,aAAd,6BACA,kHAIA,yBAAKA,UAAU,YACf,wBAAIA,UAAU,aAAd,mDAGA,oHAIA,4BACE,8EACA,kBAAC,IAAD,CACEC,KAAK,KACLE,IAAKsB,IACLpB,KAAK,8CAEP,kDACA,kBAAC,IAAD,CACEJ,KAAK,KACLE,IAAKuB,IACLrB,KAAK,+CAGT,mGAGA,6BACE,+QAWF,+HAIA,yBAAKL,UAAU,YACf,wBAAIA,UAAU,aAAd,kDAGA,uGAIA,4BACE,kEACA,kBAAC,IAAD,CACEC,KAAK,KACLE,IAAKwB,IACLtB,KAAK,qCAEP,8DACA,kBAAC,IAAD,CACEJ,KAAK,KACLE,IAAKyB,IACLvB,KAAK,yCAEP,yDACA,kBAAC,IAAD,CAAcJ,KAAK,KAAKE,IAAK0B,IAAKxB,KAAK,iCACvC,iDACA,kBAAC,IAAD,CAAcJ,KAAK,KAAKE,IAAK2B,IAAOzB,KAAK,gCAE3C,yBAAKL,UAAU,YACf,wBAAIA,UAAU,aAAd,qDAGA,mJAIA,6DACA,6BACE,sEAIF,yBAAKA,UAAU,YACf,wBAAIA,UAAU,aAAd,8CACA,yMAKA,yBAAKA,UAAU,YACf,wBAAIA,UAAU,aAAd,yCACA,kBAAC,IAAD,CACEO,KAAI,yxFA0FJC,SAAS","file":"static/js/8.cecc4e47.chunk.js","sourcesContent":["import React from \"react\"\n\nconst ImageWrapper = (props) => {\n  return (\n    <div className='image-wrapper'>\n      <img className={props.size} src={props.url} alt={props.url} />\n      <div className='image-bottom'>{props.text}</div>\n    </div>\n  )\n}\n\nexport default ImageWrapper\n","import React from \"react\"\n\nimport SyntaxHighlighter from \"react-syntax-highlighter\"\nimport { docco } from \"react-syntax-highlighter/dist/esm/styles/hljs\"\n\nconst CodePreview = ({ code, language }) => {\n  return (\n    <div className='Code'>\n      <SyntaxHighlighter language={language} style={docco}>\n        {code}\n      </SyntaxHighlighter>\n    </div>\n  )\n}\n\nexport default CodePreview\n","module.exports = __webpack_public_path__ + \"static/media/Introduction.32c568fb.webp\";","module.exports = __webpack_public_path__ + \"static/media/insert-1_0.63c56663.webp\";","module.exports = __webpack_public_path__ + \"static/media/insert-2_0.0b06cbda.webp\";","module.exports = __webpack_public_path__ + \"static/media/delete-1_0.17282697.webp\";","module.exports = __webpack_public_path__ + \"static/media/delete-2_0.008c33a9.webp\";","module.exports = __webpack_public_path__ + \"static/media/delete-3.6fa7402d.webp\";","module.exports = __webpack_public_path__ + \"static/media/delete-4.a0ba6407.webp\";","import React from \"react\"\nimport ImageWrapper from \"../../layer/ImageWrapper\"\nimport { Table } from \"antd\"\n\nimport first from \"../../../assets/img/queues/Introduction.webp\"\nimport second from \"../../../assets/img/queues/insert-1_0.webp\"\nimport third from \"../../../assets/img/queues/insert-2_0.webp\"\nimport fourth from \"../../../assets/img/queues/delete-1_0.webp\"\nimport fifth from \"../../../assets/img/queues/delete-2_0.webp\"\nimport six from \"../../../assets/img/queues/delete-3.webp\"\nimport seven from \"../../../assets/img/queues/delete-4.webp\"\nimport CodePreview from \"../../layer/CodePreview\"\n\nconst { Column } = Table\nconst PriorityQueue = () => {\n  const data = [\n    {\n      key: \"1\",\n      method: \"Linked List\",\n      peek: \"O(1)\",\n      insert: \"O(n)\",\n      delete: \"O(1)\",\n    },\n    {\n      key: \"2\",\n      method: \"Binary Heap\",\n      peek: \"O(1)\",\n      insert: \"O(log n)\",\n      delete: \"O(log n)\",\n    },\n    {\n      key: \"3\",\n      method: \"Binary Search Tree\",\n      peek: \"O(1)\",\n      insert: \"O(log n)\",\n      delete: \"O(log n)\",\n    },\n  ]\n  return (\n    <div className='container'>\n      <h3 className='title'>Priority Queue</h3>\n      <p>\n        A priority queue is a special type of queue in which each element is\n        associated with a priority and is served according to its priority. If\n        elements with the same priority occur, they are served according to\n        their order in the queue.\n      </p>\n      <p>\n        Generally, the value of the element itself is considered for assigning\n        the priority.\n      </p>\n      <p>\n        For example, The element with the highest value is considered as the\n        highest priority element. However, in other cases, we can assume the\n        element with the lowest value as the highest priority element. In other\n        cases, we can set priorities according to our needs.\n      </p>\n      <ImageWrapper\n        size='sm'\n        url={first}\n        text='Removing Highest Priority Element'\n      />\n      <div className='divider'></div>\n      <h3 className='sub-title'>\n        Difference between Priority Queue and Normal Queue\n      </h3>\n      <p>\n        In a queue, the first-in-first-out rule is implemented whereas, in a\n        priority queue, the values are removed on the basis of priority. The\n        element with the highest priority is removed first.\n      </p>\n      <div className='divider'></div>\n      <h3 className='sub-title'>Implementation of Priority Queue</h3>\n      <p>\n        Priority queue can be implemented using an array, a linked list, a heap\n        data structure, or a binary search tree. Among these data structures,\n        heap data structure provides an efficient implementation of priority\n        queues.\n      </p>\n      <p>\n        Hence, we will be using the heap data structure to implement the\n        priority queue in this tutorial. A max-heap is implement is in the\n        following operations. If you want to learn more about it, please visit\n        max-heap and mean-heap.\n      </p>\n      <p>\n        A comparative analysis of different implementations of priority queue is\n        given below.\n      </p>\n      <Table dataSource={data}>\n        <Column title='Operations' dataIndex='method' key='method' />\n        <Column title='peek' dataIndex='peek' key='peek' />\n        <Column title='insert' dataIndex='insert' key='insert' />\n        <Column title='delete' dataIndex='delete' key='delete' />\n      </Table>\n      <div className='divider'></div>\n      <h3 className='sub-title'>Priority Queue Operations</h3>\n      <p>\n        Basic operations of a priority queue are inserting, removing, and\n        peeking elements.\n      </p>\n      <div className='divider'></div>\n      <h3 className='sub-title'>\n        1. Inserting an Element into the Priority Queue\n      </h3>\n      <p>\n        Inserting an element into a priority queue (max-heap) is done by the\n        following steps.\n      </p>\n      <ul>\n        <li>Insert the new element at the end of the tree.</li>\n        <ImageWrapper\n          size='sm'\n          url={second}\n          text='Insert an element at the end of the queue'\n        />\n        <li>Heapify the tree. </li>\n        <ImageWrapper\n          size='sm'\n          url={third}\n          text='Insert an element at the end of the queue'\n        />\n      </ul>\n      <p>\n        Algorithm for insertion of an element into priority queue (max-heap)\n      </p>\n      <pre>\n        <code>\n          {`\n          If there is no node, \n            create a newNode.\n          else (a node is already present)\n            insert the newNode at the end (last node from left to right.)\n          \n          heapify the array\n          `}\n        </code>\n      </pre>\n      <p>\n        For Min Heap, the above algorithm is modified so that parentNode is\n        always smaller than newNode.\n      </p>\n      <div className='divider'></div>\n      <h3 className='sub-title'>\n        2. Deleting an Element from the Priority Queue\n      </h3>\n      <p>\n        Deleting an element from a priority queue (max-heap) is done as follows:\n      </p>\n\n      <ul>\n        <li>Select the element to be deleted. </li>\n        <ImageWrapper\n          size='sm'\n          url={fourth}\n          text='Select the element to be deleted'\n        />\n        <li>Swap it with the last element.</li>\n        <ImageWrapper\n          size='sm'\n          url={fifth}\n          text='Swap with the last leaf node element'\n        />\n        <li>Remove the last element. </li>\n        <ImageWrapper size='sm' url={six} text='Remove the last element leaf' />\n        <li>Heapify the tree.</li>\n        <ImageWrapper size='sm' url={seven} text='Heapify the priority queue' />\n      </ul>\n      <div className='divider'></div>\n      <h3 className='sub-title'>\n        3. Peeking from the Priority Queue (Find max/min)\n      </h3>\n      <p>\n        Peek operation returns the maximum element from Max Heap or minimum\n        element from Min Heap without deleting the node.\n      </p>\n      <p>For both Max heap and Min Heap</p>\n      <pre>\n        <code>{`\n        return rootNode\n        `}</code>\n      </pre>\n      <div className='divider'></div>\n      <h3 className='sub-title'>4. Extract-Max/Min from the Priority Queue</h3>\n      <p>\n        Extract-Max returns the node with maximum value after removing it from a\n        Max Heap whereas Extract-Min returns the node with minimum value after\n        removing it from Min Heap.\n      </p>\n      <div className='divider'></div>\n      <h3 className='sub-title'>Priority Queue Implementation in Java</h3>\n      <CodePreview\n        code={`\n        // Priority Queue implementation in Java\n\n        import java.util.ArrayList;\n        \n        class Heap {\n          // Function to heapify the tree\n          void heapify(ArrayList<Integer> hT, int i) {\n            int size = hT.size();\n            // Find the largest among root, left child and right child\n            int largest = i;\n            int l = 2 * i + 1;\n            int r = 2 * i + 2;\n            if (l < size && hT.get(l) > hT.get(largest))\n              largest = l;\n            if (r < size && hT.get(r) > hT.get(largest))\n              largest = r;\n        \n            // Swap and continue heapifying if root is not largest\n            if (largest != i) {\n              int temp = hT.get(largest);\n              hT.set(largest, hT.get(i));\n              hT.set(i, temp);\n        \n              heapify(hT, largest);\n            }\n          }\n        \n          // Function to insert an element into the tree\n          void insert(ArrayList<Integer> hT, int newNum) {\n            int size = hT.size();\n            if (size == 0) {\n              hT.add(newNum);\n            } else {\n              hT.add(newNum);\n              for (int i = size / 2 - 1; i >= 0; i--) {\n                heapify(hT, i);\n              }\n            }\n          }\n        \n          // Function to delete an element from the tree\n          void deleteNode(ArrayList<Integer> hT, int num) {\n            int size = hT.size();\n            int i;\n            for (i = 0; i < size; i++) {\n              if (num == hT.get(i))\n                break;\n            }\n        \n            int temp = hT.get(i);\n            hT.set(i, hT.get(size - 1));\n            hT.set(size - 1, temp);\n        \n            hT.remove(size - 1);\n            for (int j = size / 2 - 1; j >= 0; j--) {\n              heapify(hT, j);\n            }\n          }\n        \n          // Print the tree\n          void printArray(ArrayList<Integer> array, int size) {\n            for (Integer i : array) {\n              System.out.print(i + \" \");\n            }\n            System.out.println();\n          }\n        \n          // Driver code\n          public static void main(String args[]) {\n        \n            ArrayList<Integer> array = new ArrayList<Integer>();\n            int size = array.size();\n        \n            Heap h = new Heap();\n            h.insert(array, 3);\n            h.insert(array, 4);\n            h.insert(array, 9);\n            h.insert(array, 5);\n            h.insert(array, 2);\n        \n            System.out.println(\"Max-Heap array: \");\n            h.printArray(array, size);\n        \n            h.deleteNode(array, 4);\n            System.out.println(\"After deleting an element: \");\n            h.printArray(array, size);\n          }\n        }\n      `}\n        language='java'\n      />\n    </div>\n  )\n}\n\nexport default PriorityQueue\n"],"sourceRoot":""}