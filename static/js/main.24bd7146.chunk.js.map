{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ListExample","React","lazy","TreeExample","WhatIsBigO","GraphExample","WhatIsGraph","WhatisHashTable","DoublyList","SinglyList","WhatIsList","PriorityQueue","Queues","WhatIsStack","DeleteTree","InsertTree","WhatIsBinaryTree","Sider","NotFound","App","className","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","fallback","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","setTimeout","Prism","highlightAll"],"mappings":"yOAOMA,G,MAAcC,IAAMC,MAAK,kBAC7B,mCAEIC,EAAcF,IAAMC,MAAK,kBAC7B,wDAEIE,EAAaH,IAAMC,MAAK,kBAC5B,wDAEIG,EAAeJ,IAAMC,MAAK,kBAC9B,wDAEII,EAAcL,IAAMC,MAAK,kBAC7B,wDAEIK,EAAkBN,IAAMC,MAAK,kBACjC,wDAEIM,EAAaP,IAAMC,MAAK,kBAC5B,wDAEIO,EAAaR,IAAMC,MAAK,kBAC5B,wDAEIQ,EAAaT,IAAMC,MAAK,kBAC5B,sEAEIS,EAAgBV,IAAMC,MAAK,kBAC/B,qEAEIU,EAASX,IAAMC,MAAK,kBAAM,wDAC1BW,EAAcZ,IAAMC,MAAK,kBAC7B,wDAEIY,EAAab,IAAMC,MAAK,kBAC5B,uDAEIa,EAAad,IAAMC,MAAK,kBAC5B,wDAEIc,EAAmBf,IAAMC,MAAK,kBAClC,wDAEIe,EAAQhB,IAAMC,MAAK,kBAAM,gEAwC/B,IAAMgB,EAAW,WACf,OAAO,gDAGMC,EA1Cf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,KAEE,kBAACH,EAAD,MACA,kBAAC,IAAD,KAEE,kBAAC,IAAD,CAAOI,KAAK,sBAAsBC,UAAWZ,EAAYa,OAAK,IAC9D,kBAAC,IAAD,CAAOF,KAAK,gBAAgBC,UAAWb,IACvC,kBAAC,IAAD,CAAOY,KAAK,gBAAgBC,UAAWd,IACvC,kBAAC,IAAD,CAAOa,KAAK,gBAAgBC,UAAWtB,IACvC,kBAAC,IAAD,CAAOqB,KAAK,iBAAiBC,UAAWT,IACxC,kBAAC,IAAD,CAAOQ,KAAK,iBAAiBC,UAAWV,IACxC,kBAAC,IAAD,CAAOS,KAAK,mBAAmBC,UAAWX,IAC1C,kBAAC,IAAD,CAAOU,KAAK,wBAAwBC,UAAWb,IAC/C,kBAAC,IAAD,CAAOY,KAAK,eAAeC,UAAWlB,IACtC,kBAAC,IAAD,CAAOiB,KAAK,aAAaC,UAAWb,IACpC,kBAAC,IAAD,CAAOY,KAAK,uBAAuBC,UAAWN,IAC9C,kBAAC,IAAD,CAAOK,KAAK,sBAAsBC,UAAWP,IAC7C,kBAAC,IAAD,CAAOM,KAAK,yBAAyBC,UAAWR,IAChD,kBAAC,IAAD,CAAOO,KAAK,iBAAiBC,UAAWnB,IACxC,kBAAC,IAAD,CAAOkB,KAAK,6BAA6BC,UAAWb,IACpD,kBAAC,IAAD,CAAOY,KAAK,iBAAiBC,UAAWb,IACxC,kBAAC,IAAD,CAAOY,KAAK,mBAAmBC,UAAWb,IAC1C,kBAAC,IAAD,CAAOY,KAAK,qBAAqBC,UAAWf,IAC5C,kBAAC,IAAD,CAAOc,KAAK,gBAAgBC,UAAWb,IACvC,kBAAC,IAAD,CAAOY,KAAK,uBAAuBC,UAAWhB,IAC9C,kBAAC,IAAD,CAAOe,KAAK,mBAAmBC,UAAWb,IAC1C,kBAAC,IAAD,CAAOY,KAAK,iBAAiBC,UAAWjB,IACxC,kBAAC,IAAD,CAAOiB,UAAWJ,Q,iBCtERM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,WAAD,CAAUC,SAAU,yBAAKX,UAAU,SAAf,eAClB,kBAAC,EAAD,OAEFY,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,gBCnHnBC,YAAW,kBAAMC,IAAMC,iBAAgB,K","file":"static/js/main.24bd7146.chunk.js","sourcesContent":["import React from \"react\"\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\"\n\n// import Home from \"./components/pages/Home\"\n\nimport \"./assets/scss/style.scss\"\n// import Header from \"./components/layer/Header\"\nconst ListExample = React.lazy(() =>\n  import(\"./components/pages/Lists/ListExample\")\n)\nconst TreeExample = React.lazy(() =>\n  import(\"./components/pages/Tree/TreeExample\")\n)\nconst WhatIsBigO = React.lazy(() =>\n  import(\"./components/pages/BigO/WhatIsBigO\")\n)\nconst GraphExample = React.lazy(() =>\n  import(\"./components/pages/Graph/GraphExample\")\n)\nconst WhatIsGraph = React.lazy(() =>\n  import(\"./components/pages/Graph/WhatIsGraph\")\n)\nconst WhatisHashTable = React.lazy(() =>\n  import(\"./components/pages/Hash/WhatIsHashTable\")\n)\nconst DoublyList = React.lazy(() =>\n  import(\"./components/pages/Lists/DoubleList\")\n)\nconst SinglyList = React.lazy(() =>\n  import(\"./components/pages/Lists/SinglyList\")\n)\nconst WhatIsList = React.lazy(() =>\n  import(\"./components/pages/Lists/WhatIsList\")\n)\nconst PriorityQueue = React.lazy(() =>\n  import(\"./components/pages/Queues/PriorityQueue\")\n)\nconst Queues = React.lazy(() => import(\"./components/pages/Queues/Queues\"))\nconst WhatIsStack = React.lazy(() =>\n  import(\"./components/pages/Queues/WhatIsStack\")\n)\nconst DeleteTree = React.lazy(() =>\n  import(\"./components/pages/Tree/DeleteTree\")\n)\nconst InsertTree = React.lazy(() =>\n  import(\"./components/pages/Tree/InsertTree\")\n)\nconst WhatIsBinaryTree = React.lazy(() =>\n  import(\"./components/pages/Tree/WhatIsBinaryTree\")\n)\nconst Sider = React.lazy(() => import(\"./containers/Sidebar\"))\n\nfunction App() {\n  return (\n    <div className='app'>\n      <Router>\n        {/* <Header /> */}\n        <Sider />\n        <Switch>\n          {/* <Route path='/' exact component={TemplateForLectures} exact /> */}\n          <Route path='/lists/what-is-list' component={WhatIsList} exact />\n          <Route path='/lists/singly' component={SinglyList} />\n          <Route path='/lists/doubly' component={DoublyList} />\n          <Route path='/lists/visual' component={ListExample} />\n          <Route path='/queues/stecks' component={WhatIsStack} />\n          <Route path='/queues/queues' component={Queues} />\n          <Route path='/queues/priority' component={PriorityQueue} />\n          <Route path='/queues/visualization' component={SinglyList} />\n          <Route path='/o/what-is-o' component={WhatIsBigO} />\n          <Route path='/o/example' component={SinglyList} />\n          <Route path='/binary/what-is-tree' component={WhatIsBinaryTree} />\n          <Route path='/binary/add-element' component={InsertTree} />\n          <Route path='/binary/delete-element' component={DeleteTree} />\n          <Route path='/binary/vizual' component={TreeExample} />\n          <Route path='/pyramids/what-is-pyramids' component={SinglyList} />\n          <Route path='/pyramids/sort' component={SinglyList} />\n          <Route path='/pyramids/vizual' component={SinglyList} />\n          <Route path='/hash/what-is-hash' component={WhatisHashTable} />\n          <Route path='/hash/example' component={SinglyList} />\n          <Route path='/graph/what-is-graph' component={WhatIsGraph} />\n          <Route path='/graph/algorithm' component={SinglyList} />\n          <Route path='/graph/example' component={GraphExample} />\n          <Route component={NotFound} />\n        </Switch>\n        {/* <Footer /> */}\n      </Router>\n    </div>\n  )\n}\n\nconst NotFound = () => {\n  return <div>not found 404!</div>\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\nimport Prism from \"prismjs\"\nimport * as serviceWorker from \"./serviceWorker\"\nimport { Suspense } from \"react\"\n\nReactDOM.render(\n  <Suspense fallback={<div className='title'>loading...</div>}>\n    <App />\n  </Suspense>,\n  document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\nsetTimeout(() => Prism.highlightAll(), 0)\n"],"sourceRoot":""}