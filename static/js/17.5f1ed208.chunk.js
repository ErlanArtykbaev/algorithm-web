(this["webpackJsonpalgorithm-web"]=this["webpackJsonpalgorithm-web"]||[]).push([[17],{36:function(e,t,a){"use strict";var n=a(0),l=a.n(n);t.a=function(e){return l.a.createElement("div",{className:"image-wrapper"},l.a.createElement("img",{className:e.size,src:e.url,alt:e.url}),l.a.createElement("div",{className:"image-bottom"},e.text))}},37:function(e,t,a){"use strict";var n=a(0),l=a.n(n),i=a(711),s=a(684);t.a=function(e){var t=e.code,a=e.language;return l.a.createElement("div",{className:"Code"},l.a.createElement(i.a,{language:a,style:s.a},t))}},613:function(e,t,a){e.exports=a.p+"static/media/stack-of-plates_0.8a4d93f7.webp"},614:function(e,t,a){e.exports=a.p+"static/media/stack.f89ff169.webp"},615:function(e,t,a){e.exports=a.p+"static/media/stack-operations.8098ec70.webp"},702:function(e,t,a){"use strict";a.r(t);var n=a(0),l=a.n(n),i=a(36),s=a(613),r=a.n(s),c=a(614),o=a.n(c),m=a(615),p=a.n(m),u=a(37);t.default=function(){return l.a.createElement("div",{className:"container"},l.a.createElement("h3",{className:"title"},"Stack Data Structure"),l.a.createElement("p",null,"A stack is a useful data structure in programming. It is just like a pile of plates kept on top of each other."),l.a.createElement(i.a,{size:"sm",url:r.a,text:"Stack representation similar to a pile of plate"}),l.a.createElement("p",null,"Think about the things you can do with such a pile of plates"),l.a.createElement("ul",null,l.a.createElement("li",null,"Put a new plate on top"),l.a.createElement("li",null,"Remove the top plate")),l.a.createElement("p",null,"If you want the plate at the bottom, you must first remove all the plates on top. Such an arrangement is called"," ",l.a.createElement("strong",null," Last In First Out ")," - the last item that is the first item to go out."),l.a.createElement("div",{className:"divider"}),l.a.createElement("h3",{className:"sub-title"},"LIFO Principle of Stack"),l.a.createElement("p",null,"In programming terms, putting an item on top of the stack is called"," ",l.a.createElement("strong",null," push ")," and removing an item is called"," ",l.a.createElement("strong",null,"pop"),"."),l.a.createElement(i.a,{size:"sm",url:o.a,text:"Stack Push and Pop Operations"}),l.a.createElement("p",null,"In the above image, although item 2 was kept last, it was removed first - so it follows the ",l.a.createElement("strong",null," Last In First Out(LIFO)")," principle."),l.a.createElement("p",null,"We can implement a stack in any programming language like C, C++, Java, Python or C#, but the specification is pretty much the same."),l.a.createElement("div",{className:"divider"}),l.a.createElement("h3",{className:"sub-title"},"Basic Operations of Stack"),l.a.createElement("p",null,"A stack is an object (an abstract data type - ADT) that allows the following operations:"),l.a.createElement("ul",null,l.a.createElement("li",null,l.a.createElement("strong",null,"Push: ")," Add an element to the top of a stack"),l.a.createElement("li",null,l.a.createElement("strong",null,"Pop: ")," Remove an element from the top of a stack"),l.a.createElement("li",null,l.a.createElement("strong",null,"IsEmpty: ")," Check if the stack is empty"),l.a.createElement("li",null,l.a.createElement("strong",null,"IsFull: ")," Check if the stack is full"),l.a.createElement("li",null,l.a.createElement("strong",null,"Peek: ")," Get the value of the top element without removing it")),l.a.createElement("div",{className:"divider"}),l.a.createElement("h3",{className:"sub-title"},"Working of Stack Data Structure"),l.a.createElement("p",null,"The operations work as follows:"),l.a.createElement("p",null,"1. A pointer called ",l.a.createElement("span",{className:"var"},"TOP")," is used to keep track of the top element in the stack."),l.a.createElement("p",null,"2. When initializing the stack, we set its value to -1 so that we can check if the stack is empty by comparing"," ",l.a.createElement("span",{className:"var"},"TOP == -1"),"."),l.a.createElement("p",null,"3. On pushing an element, we increase the value of TOP and place the new element in the position pointed to by ",l.a.createElement("span",{className:"var"},"TOP")),l.a.createElement("p",null,"4. On popping an element, we return the element pointed to by"," ",l.a.createElement("span",{className:"var"},"TOP")," and reduce its value."),l.a.createElement("p",null,"5. Before pushing, we check if the stack is already full"),l.a.createElement("p",null,"6. Before popping, we check if the stack is already empty"),l.a.createElement(i.a,{size:"md",url:p.a,text:"Working of Stack Data Structure"}),l.a.createElement("div",{className:"divider"}),l.a.createElement("h3",{className:"sub-title"},"Stack Implementation in Java"),l.a.createElement(u.a,{language:"java",code:'\n        // Stack implementation in Java\n\n        class Stack {\n          private int arr[];\n          private int top;\n          private int capacity;\n        \n          // Creating a stack\n          Stack(int size) {\n            arr = new int[size];\n            capacity = size;\n            top = -1;\n          }\n        \n          // Add elements into stack\n          public void push(int x) {\n            if (isFull()) {\n              System.out.println("OverFlow Program Terminated ");\n              System.exit(1);\n            }\n        \n            System.out.println("Inserting " + x);\n            arr[++top] = x;\n          }\n        \n          // Remove element from stack\n          public int pop() {\n            if (isEmpty()) {\n              System.out.println("STACK EMPTY");\n              System.exit(1);\n            }\n            return arr[top--];\n          }\n        \n          // Utility function to return the size of the stack\n          public int size() {\n            return top + 1;\n          }\n        \n          // Check if the stack is empty\n          public Boolean isEmpty() {\n            return top == -1;\n          }\n        \n          // Check if the stack is full\n          public Boolean isFull() {\n            return top == capacity - 1;\n          }\n        \n          public void printStack() {\n            for (int i = 0; i <= top; i++) {\n              System.out.println(arr[i]);\n            }\n          }\n        \n          public static void main(String[] args) {\n            Stack stack = new Stack(5);\n        \n            stack.push(1);\n            stack.push(2);\n            stack.push(3);\n            stack.push(4);\n        \n            stack.pop();\n            System.out.println("After popping out");\n        \n            stack.printStack();\n        \n          }\n        }\n      '}),l.a.createElement("div",{className:"divider"}),l.a.createElement("h3",{className:"sub-title"},"Stack Time Complexity"),l.a.createElement("p",null,"For the array-based implementation of a stack, the push and pop operations take constant time, i.e. ",l.a.createElement("span",{className:"var"},"O(1)"),"."))}}}]);
//# sourceMappingURL=17.5f1ed208.chunk.js.map