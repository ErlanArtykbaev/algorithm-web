{"version":3,"sources":["components/layer/ImageWrapper.js","components/layer/CodePreview.js","assets/img/tree/insertion.webp","components/pages/Tree/InsertTree.js"],"names":["ImageWrapper","props","className","size","src","url","alt","text","CodePreview","code","language","style","docco","module","exports","InsertTree","first"],"mappings":"sHAAA,oBAWeA,IATM,SAACC,GACpB,OACE,yBAAKC,UAAU,iBACb,yBAAKA,UAAWD,EAAME,KAAMC,IAAKH,EAAMI,IAAKC,IAAKL,EAAMI,MACvD,yBAAKH,UAAU,gBAAgBD,EAAMM,S,gCCN3C,sCAeeC,IAVK,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAC3B,OACE,yBAAKR,UAAU,QACb,kBAAC,IAAD,CAAmBQ,SAAUA,EAAUC,MAAOC,KAC3CH,M,oBCTTI,EAAOC,QAAU,IAA0B,wC,iCCA3C,6DAkPeC,UA5OI,WACjB,OACE,yBAAKb,UAAU,aACb,wBAAIA,UAAU,SAAd,2BACA,iPAMA,oEACA,yBAAKA,UAAU,YACf,yBAAKA,UAAU,aAAf,uBACA,gGACA,gFACA,4EACA,8EACA,0EACA,0GAIA,yIAIA,kFACA,sEACA,yBAAKA,UAAU,YACf,wBAAIA,UAAU,aAAd,qBACA,sGAGA,oGAGA,kBAAC,IAAD,CACEC,KAAK,MACLE,IAAKW,IACLT,KAAK,qCAEP,yBAAKL,UAAU,YACf,wBAAIA,UAAU,aAAd,sCACA,kBAAC,IAAD,CACEO,KAAI,21CA+CJC,SAAS,MAEX,yBAAKR,UAAU,YACf,wBAAIA,UAAU,aAAd,gBACA,kBAAC,IAAD,CACEO,KAAI,0kHAsIJC,SAAS","file":"static/js/25.905ecf94.chunk.js","sourcesContent":["import React from \"react\"\n\nconst ImageWrapper = (props) => {\n  return (\n    <div className='image-wrapper'>\n      <img className={props.size} src={props.url} alt={props.url} />\n      <div className='image-bottom'>{props.text}</div>\n    </div>\n  )\n}\n\nexport default ImageWrapper\n","import React from \"react\"\n\nimport SyntaxHighlighter from \"react-syntax-highlighter\"\nimport { docco } from \"react-syntax-highlighter/dist/esm/styles/hljs\"\n\nconst CodePreview = ({ code, language }) => {\n  return (\n    <div className='Code'>\n      <SyntaxHighlighter language={language} style={docco}>\n        {code}\n      </SyntaxHighlighter>\n    </div>\n  )\n}\n\nexport default CodePreview\n","module.exports = __webpack_public_path__ + \"static/media/insertion.f34cac96.webp\";","import React from \"react\"\nimport ImageWrapper from \"../../layer/ImageWrapper\"\n\nimport first from \"../../../assets/img/tree/insertion.webp\"\nimport CodePreview from \"../../layer/CodePreview\"\n\nconst InsertTree = () => {\n  return (\n    <div className='container'>\n      <h3 className='title'>Insertion into a B-tree</h3>\n      <p>\n        Inserting an element on a B-tree consists of two events: searching the\n        appropriate node to insert the element and splitting the node if\n        required.Insertion operation always takes place in the bottom-up\n        approach.\n      </p>\n      <p>Let us understand these events below.</p>\n      <div className='divider'></div>\n      <div className='sub-title'>Insertion Operation</div>\n      <p>1. If the tree is empty, allocate a root node and insert the key.</p>\n      <p>2. Update the allowed number of keys in the node.</p>\n      <p>3. Search the appropriate node for insertion.</p>\n      <p>4. If the node is full, follow the steps below.</p>\n      <p>5. Insert the elements in increasing order.</p>\n      <p>\n        6. Now, there are elements greater than its limit. So, split at the\n        median.\n      </p>\n      <p>\n        7. Push the median key upwards and make the left keys as a left child\n        and the right keys as a right child.\n      </p>\n      <p>8. If the node is not full, follow the steps below.</p>\n      <p>9. Insert the node in increasing order.</p>\n      <div className='divider'></div>\n      <h3 className='sub-title'>Insertion Example</h3>\n      <p>\n        Let us understand the insertion operation with the illustrations below.\n      </p>\n      <p>\n        The elements to be inserted are 8, 9, 10, 11, 15, 16, 17, 18, 20, 23.\n      </p>\n      <ImageWrapper\n        size='big'\n        url={first}\n        text='Inserting elements into a B-tree'\n      />\n      <div className='divider'></div>\n      <h3 className='sub-title'>Algorithm for Inserting an Element</h3>\n      <CodePreview\n        code={`\n        BreeInsertion(T, k)\n        r  root[T]\n        if n[r] = 2t - 1\n            s = AllocateNode()\n            root[T] = s\n            leaf[s] = FALSE\n            n[s] <- 0\n            c1[s] <- r\n            BtreeSplitChild(s, 1, r)\n            BtreeInsertNonFull(s, k)\n        else BtreeInsertNonFull(r, k)\n        BtreeInsertNonFull(x, k)\n        i = n[x]\n        if leaf[x]\n            while i ≥ 1 and k < keyi[x]\n                keyi+1 [x] = keyi[x]\n                i = i - 1\n            keyi+1[x] = k\n            n[x] = n[x] + 1\n        else while i ≥ 1 and k < keyi[x]\n                i = i - 1\n            i = i + 1\n            if n[ci[x]] == 2t - 1\n                BtreeSplitChild(x, i, ci[x])\n                if k &rt; keyi[x]\n                    i = i + 1\n            BtreeInsertNonFull(ci[x], k)\n        BtreeSplitChild(x, i)\n        BtreeSplitChild(x, i, y)\n        z = AllocateNode()\n        leaf[z] = leaf[y]\n        n[z] = t - 1\n        for j = 1 to t - 1\n            keyj[z] = keyj+t[y]\n        if not leaf [y]\n            for j = 1 to t\n                cj[z] = cj + t[y]\n        n[y] = t - 1\n        for j = n[x] + 1 to i + 1\n            cj+1[x] = cj[x]\n        ci+1[x] = z\n        for j = n[x] to i\n            keyj+1[x] = keyj[x]\n        keyi[x] = keyt[y]\n        n[x] = n[x] + 1\n        `}\n        language='c'\n      />\n      <div className='divider'></div>\n      <h3 className='sub-title'>Java Example</h3>\n      <CodePreview\n        code={`\n        // Inserting a key on a B-tree in Java \n\n        public class BTree {\n        \n          private int T;\n        \n          // Node Creation\n          public class Node {\n            int n;\n            int key[] = new int[2 * T - 1];\n            Node child[] = new Node[2 * T];\n            boolean leaf = true;\n        \n            public int Find(int k) {\n              for (int i = 0; i < this.n; i++) {\n                if (this.key[i] == k) {\n                  return i;\n                }\n              }\n              return -1;\n            };\n          }\n        \n          public BTree(int t) {\n            T = t;\n            root = new Node();\n            root.n = 0;\n            root.leaf = true;\n          }\n        \n          private Node root;\n        \n          // split\n          private void split(Node x, int pos, Node y) {\n            Node z = new Node();\n            z.leaf = y.leaf;\n            z.n = T - 1;\n            for (int j = 0; j < T - 1; j++) {\n              z.key[j] = y.key[j + T];\n            }\n            if (!y.leaf) {\n              for (int j = 0; j < T; j++) {\n                z.child[j] = y.child[j + T];\n              }\n            }\n            y.n = T - 1;\n            for (int j = x.n; j >= pos + 1; j--) {\n              x.child[j + 1] = x.child[j];\n            }\n            x.child[pos + 1] = z;\n        \n            for (int j = x.n - 1; j >= pos; j--) {\n              x.key[j + 1] = x.key[j];\n            }\n            x.key[pos] = y.key[T - 1];\n            x.n = x.n + 1;\n          }\n        \n          // insert key\n          public void insert(final int key) {\n            Node r = root;\n            if (r.n == 2 * T - 1) {\n              Node s = new Node();\n              root = s;\n              s.leaf = false;\n              s.n = 0;\n              s.child[0] = r;\n              split(s, 0, r);\n              _insert(s, key);\n            } else {\n              _insert(r, key);\n            }\n          }\n        \n          // insert node\n          final private void _insert(Node x, int k) {\n        \n            if (x.leaf) {\n              int i = 0;\n              for (i = x.n - 1; i >= 0 && k < x.key[i]; i--) {\n                x.key[i + 1] = x.key[i];\n              }\n              x.key[i + 1] = k;\n              x.n = x.n + 1;\n            } else {\n              int i = 0;\n              for (i = x.n - 1; i >= 0 && k < x.key[i]; i--) {\n              }\n              ;\n              i++;\n              Node tmp = x.child[i];\n              if (tmp.n == 2 * T - 1) {\n                split(x, i, tmp);\n                if (k > x.key[i]) {\n                  i++;\n                }\n              }\n              _insert(x.child[i], k);\n            }\n        \n          }\n        \n          public void display() {\n            display(root);\n          }\n        \n          // Display the tree\n          private void display(Node x) {\n            assert (x == null);\n            for (int i = 0; i < x.n; i++) {\n              System.out.print(x.key[i] + \" \");\n            }\n            if (!x.leaf) {\n              for (int i = 0; i < x.n + 1; i++) {\n                display(x.child[i]);\n              }\n            }\n          }\n        \n          public static void main(String[] args) {\n            BTree b = new BTree(3);\n            b.insert(8);\n            b.insert(9);\n            b.insert(10);\n            b.insert(11);\n            b.insert(15);\n            b.insert(20);\n            b.insert(17);\n        \n            b.display();\n          }\n        }\n        `}\n        language='java'\n      />\n    </div>\n  )\n}\n\nexport default InsertTree\n"],"sourceRoot":""}