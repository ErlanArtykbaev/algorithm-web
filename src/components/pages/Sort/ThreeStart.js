import React from 'react'


import basesorting from '../../../assets/img/third/base-sorting.png'
import codesorting1 from '../../../assets/img/third/code-sorting1.PNG'

const ThreeStart = () => {
  return(
    <div className="Three-Start">
      <h1>Метод сортировки</h1>
        <p>
          Сортировка элементов — одна из категорий алгоритмов, к которым разработчик должен привыкнуть.
        </p>
        <img alt="base sorting"  src={basesorting} />
        <p>Базовые алгоритмы, самые простые, реализованы при помощи цикла for.</p>
        <p>
          Естественно, чтобы отсортировать коллекцию элементов,например, массив, нужно по этой коллекции как-то пройти. Например:
        </p>
        <div>
          <img alt="code" src={codesorting1} />
        </div>
        <div>
          Что можно сказать об этом участке кода? 
          <br />
          Мы имеем цикл, в котором меняем значение индекса (int i) с 0 до последнего элемента в массиве. Фактически, мы просто берём каждый элемент в массиве и печатаем его содержимое. Чем больше элементов в массиве, тем дольше будет выполняться код.
          <br />
          То есть, если n — количество элементов, при n=10 программа будет выполняться дольше, чем при n=5, в 2 раза.
          <br />
          Когда в нашей программе есть один цикл, время выполнения растёт линейно: чем больше элементов, тем дольше выполнение. Получается, что алгоритм кода выше работает за линейное время (n). В таких случаях говорят, что "сложность алгоритма" равна O(n). Это обозначение ещё называют "большое О" или "асимптотическое поведение". Но можно запомнить просто "сложность алгоритма".
        </div>
    </div>
  )  
}

export default ThreeStart
